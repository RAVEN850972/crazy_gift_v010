#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
"""

import sys
import os
from pathlib import Path
import httpx
import asyncio

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ backend
backend_path = Path(__file__).parent.parent / "backend"
sys.path.insert(0, str(backend_path))

def check_backend_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é backend"""
    try:
        from app.config import settings
        
        print("Backend configuration:")
        print(f"  Database URL: {settings.database_url}")
        print(f"  Debug mode: {settings.debug}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if "sqlite" in settings.database_url:
            db_path = settings.database_url.replace("sqlite+aiosqlite:///", "")
            if db_path.startswith("./"):
                # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –æ—Ç backend –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                full_db_path = backend_path / db_path[2:]
            else:
                full_db_path = Path(db_path)
            
            print(f"  Actual DB path: {full_db_path}")
            print(f"  DB file exists: {full_db_path.exists()}")
            
            if full_db_path.exists():
                print(f"  DB file size: {full_db_path.stat().st_size} bytes")
            
            return str(full_db_path)
        
        return None
        
    except Exception as e:
        print(f"Config check error: {e}")
        return None

async def check_api_db_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –∫ –ë–î –Ω–∞–ø—Ä—è–º—É—é"""
    try:
        from app.database import AsyncSessionLocal
        from app.models import User
        from sqlalchemy import select, text
        
        print("\nAPI database connection test:")
        
        async with AsyncSessionLocal() as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            result = await db.execute(text("SELECT name FROM sqlite_master WHERE type='table'"))
            tables = result.fetchall()
            print(f"  Tables in API DB: {[table[0] for table in tables]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await db.execute(select(User))
            users = result.scalars().all()
            print(f"  Users in API DB: {len(users)}")
            
            for user in users:
                print(f"    User {user.id}: {user.username}, Balance: {user.balance_stars}")
                
            return len(users) > 0
            
    except Exception as e:
        print(f"API DB connection error: {e}")
        return False

def create_user_directly_in_api_db():
    """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –≤ API –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    import sqlite3
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –ë–î –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    db_path = check_backend_config()
    
    if not db_path:
        print("Cannot determine database path")
        return None
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–æ–π –∂–µ –ë–î —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print(f"\nWorking with database: {db_path}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("DELETE FROM users")
        print("Cleared existing users")
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from datetime import datetime
        now = datetime.utcnow().isoformat()
        
        cursor.execute("""
            INSERT INTO users (
                telegram_id, username, first_name, last_name,
                balance_stars, balance_ton, referral_code,
                total_cases_opened, total_spent_stars, total_earned_stars,
                created_at, updated_at, last_active
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """, (
            123456789, 'testuser', 'Test', 'User',
            10000, 0.0, 'CG123TEST',
            0, 0, 0,
            now, now, now
        ))
        
        user_id = cursor.lastrowid
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º
        cursor.execute("SELECT id, username, balance_stars FROM users WHERE id = ?", (user_id,))
        user = cursor.fetchone()
        
        conn.close()
        
        if user:
            print(f"‚úÖ Created user in API database: ID {user[0]}, Balance {user[2]}")
            return user[0]
        else:
            print("‚ùå Failed to create user in API database")
            return None
            
    except Exception as e:
        print(f"‚ùå Error creating user in API DB: {e}")
        return None

async def test_api_immediately(user_id):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"\nTesting API immediately with user {user_id}...")
    
    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    await asyncio.sleep(1)
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å
            response = await client.get(f"http://localhost:8000/api/users/{user_id}/balance")
            print(f"Balance API: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ SUCCESS: Balance {data['balance_stars']} stars")
                return True
            else:
                print(f"‚ùå Error: {response.json()}")
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                print("Retrying in 3 seconds...")
                await asyncio.sleep(3)
                
                response2 = await client.get(f"http://localhost:8000/api/users/{user_id}/balance")
                print(f"Retry result: {response2.status_code}")
                
                if response2.status_code == 200:
                    data = response2.json()
                    print(f"‚úÖ SUCCESS on retry: Balance {data['balance_stars']} stars")
                    return True
                
                return False
                
    except Exception as e:
        print(f"‚ùå API test error: {e}")
        return False

async def run_quick_test(user_id):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"""
    if not user_id:
        return
        
    print(f"\nRunning quick functionality test with user {user_id}...")
    
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            # –¢–µ—Å—Ç 1: –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
            response = await client.post(
                f"http://localhost:8000/api/cases/1/open",
                json={"user_id": user_id}
            )
            
            if response.status_code == 200:
                data = response.json()
                if data['success']:
                    print(f"‚úÖ Case opened! Won: {data['item']['item_name']}")
                    print(f"‚úÖ New balance: {data['new_balance']}")
                    
                    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                    inv_response = await client.get(f"http://localhost:8000/api/inventory/{user_id}")
                    if inv_response.status_code == 200:
                        items = inv_response.json()
                        print(f"‚úÖ Inventory: {len(items)} items")
                        
                        return True
                else:
                    print(f"‚ö†Ô∏è Case opening failed: {data['message']}")
            else:
                print(f"‚ùå Case API error: {response.json()}")
        
        return False
        
    except Exception as e:
        print(f"‚ùå Quick test error: {e}")
        return False

async def main():
    print("=== Database Configuration Check & Fix ===\n")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    db_path = check_backend_config()
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ API –∫ –ë–î
    api_db_ok = await check_api_db_connection()
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ë–î
    print("\nCreating user in correct database...")
    user_id = create_user_directly_in_api_db()
    
    if user_id:
        # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º API —Å—Ä–∞–∑—É
        api_works = await test_api_immediately(user_id)
        
        if api_works:
            # –®–∞–≥ 5: –ë—ã—Å—Ç—Ä—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç
            full_test = await run_quick_test(user_id)
            
            if full_test:
                print(f"\nüéâ COMPLETE SUCCESS! User {user_id} is fully functional")
                print("\nYou can now run: python3 test_complete.py")
            else:
                print(f"\n‚ö†Ô∏è User works but some functions failed")
        else:
            print(f"\n‚ùå API still doesn't see user {user_id}")
    else:
        print("\n‚ùå Failed to create user")

if __name__ == "__main__":
    asyncio.run(main())