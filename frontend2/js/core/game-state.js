/**
 * Global Game State Manager
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –∏–≥—Ä—ã
 */

class GameStateManager {
    constructor() {
        this.state = this.getDefaultState();
        this.listeners = new Map();
        this.isInitialized = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    async init() {
        if (this.isInitialized) return;
        
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await this.loadState();
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp –¥–∞–Ω–Ω—ã–µ
            await this.initTelegramData();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await this.checkAPIStatus();
            
            this.isInitialized = true;
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –æ–± –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            this.emit('initialized', this.state);
            
            console.log('üéÆ Game State Manager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:', this.state);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Game State Manager:', error);
            this.isInitialized = true; // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultState() {
        return {
            // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            balance: 0,
            currentUserId: null,
            user: null,
            
            // –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            demoMode: true,
            apiAvailable: false,
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
            settings: {
                sound: true,
                vibration: false,
                language: 'en',
                notifications: true,
                autoSync: true,
                theme: 'auto'
            },
            
            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats: {
                casesOpened: 0,
                totalSpent: 0,
                rareItemsWon: 0,
                daysActive: 0,
                lastActiveDate: null
            },
            
            // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞
            referral: {
                code: null,
                totalReferrals: 0,
                totalEarned: 0
            },
            
            // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            version: '1.0.0',
            lastSync: null,
            created: new Date().toISOString()
        };
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    async loadState() {
        try {
            if (window.gameStorage) {
                const savedState = await window.gameStorage.loadGameState();
                if (savedState) {
                    // –ú–µ—Ä–∂–∏–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    this.state = { ...this.state, ...savedState };
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    this.updateActivityStats();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    async saveState() {
        try {
            if (window.gameStorage) {
                await window.gameStorage.saveGameState(this.state);
                this.state.lastSync = new Date().toISOString();
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è:', error);
        }
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö Telegram
     */
    async initTelegramData() {
        if (window.telegramApp?.isAvailableAPI()) {
            const telegramUser = window.telegramApp.getUser();
            
            if (telegramUser) {
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Telegram ID
                this.state.currentUserId = `tg_${telegramUser.id}`;
                this.state.user = {
                    id: telegramUser.id,
                    first_name: telegramUser.first_name,
                    last_name: telegramUser.last_name,
                    username: telegramUser.username,
                    photo_url: telegramUser.photo_url,
                    language_code: telegramUser.language_code
                };
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –∏–∑ Telegram
                if (telegramUser.language_code) {
                    this.state.settings.language = telegramUser.language_code;
                }
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if (!this.state.referral.code) {
                    this.state.referral.code = this.generateReferralCode();
                }
                
                console.log('üë§ –î–∞–Ω–Ω—ã–µ Telegram –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', this.state.user);
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ API
     */
    async checkAPIStatus() {
        try {
            if (window.apiClient) {
                this.state.apiAvailable = await window.apiClient.checkAvailability();
                this.state.demoMode = !this.state.apiAvailable;
                
                console.log(`üåê API —Å—Ç–∞—Ç—É—Å: ${this.state.apiAvailable ? '–¥–æ—Å—Ç—É–ø–µ–Ω' : '–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'}`);
                
                // –ï—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                if (this.state.apiAvailable && this.state.currentUserId) {
                    await this.authenticateUser();
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error);
            this.state.apiAvailable = false;
            this.state.demoMode = true;
        }
    }

    /**
     * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ API
     */
    async authenticateUser() {
        try {
            const authResult = await window.apiClient.authenticateUser();
            
            if (authResult.success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API
                this.state.balance = authResult.user.balance || 0;
                this.state.demoMode = false;
                
                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ API');
                this.emit('authenticated', authResult.user);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
            // –û—Å—Ç–∞–µ–º—Å—è –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    updateActivityStats() {
        const today = new Date().toDateString();
        const lastActive = this.state.stats.lastActiveDate;
        
        if (lastActive !== today) {
            this.state.stats.daysActive += 1;
            this.state.stats.lastActiveDate = today;
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
     */
    generateReferralCode() {
        const prefix = 'CG';
        const suffix = Math.random().toString(36).substr(2, 6).toUpperCase();
        return prefix + suffix;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    getState() {
        return { ...this.state };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    get(path) {
        return path.split('.').reduce((obj, key) => obj?.[key], this.state);
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è
     */
    set(path, value, save = true) {
        const keys = path.split('.');
        const lastKey = keys.pop();
        const target = keys.reduce((obj, key) => {
            if (!obj[key]) obj[key] = {};
            return obj[key];
        }, this.state);
        
        const oldValue = target[lastKey];
        target[lastKey] = value;
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        this.emit('change', { path, value, oldValue });
        this.emit(`change:${path}`, { value, oldValue });
        
        // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if (save) {
            this.debouncedSave();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
     */
    updateBalance(newBalance) {
        const oldBalance = this.state.balance;
        this.set('balance', newBalance);
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
        this.emit('balanceChanged', { newBalance, oldBalance, diff: newBalance - oldBalance });
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –±–∞–ª–∞–Ω—Å—É
     */
    addBalance(amount) {
        this.updateBalance(this.state.balance + amount);
    }

    /**
     * –í—ã—á–∏—Ç–∞–Ω–∏–µ –∏–∑ –±–∞–ª–∞–Ω—Å–∞
     */
    subtractBalance(amount) {
        const newBalance = Math.max(0, this.state.balance - amount);
        this.updateBalance(newBalance);
        return this.state.balance >= amount; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    updateSetting(key, value) {
        this.set(`settings.${key}`, value);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
        this.applySetting(key, value);
    }

    /**
     * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
     */
    applySetting(key, value) {
        switch (key) {
            case 'vibration':
                window.haptic?.setEnabled(value);
                break;
            case 'language':
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                break;
            case 'theme':
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–º–µ–Ω—É —Ç–µ–º—ã
                break;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    updateStats(updates) {
        Object.entries(updates).forEach(([key, value]) => {
            this.set(`stats.${key}`, value, false);
        });
        
        this.debouncedSave();
    }

    /**
     * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    incrementStat(statName, amount = 1) {
        const currentValue = this.get(`stats.${statName}`) || 0;
        this.set(`stats.${statName}`, currentValue + amount);
    }

    /**
     * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    async reset() {
        const oldState = { ...this.state };
        this.state = this.getDefaultState();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        this.state.settings = { ...oldState.settings };
        
        await this.saveState();
        this.emit('reset', { oldState, newState: this.state });
    }

    /**
     * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
     */
    on(event, callback) {
        if (!this.listeners.has(event)) {
            this.listeners.set(event, new Set());
        }
        this.listeners.get(event).add(callback);
        
        return () => this.off(event, callback);
    }

    /**
     * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
     */
    off(event, callback) {
        const eventListeners = this.listeners.get(event);
        if (eventListeners) {
            eventListeners.delete(callback);
        }
    }

    /**
     * –í—ã–∑–æ–≤ —Å–æ–±—ã—Ç–∏—è
     */
    emit(event, data) {
        const eventListeners = this.listeners.get(event);
        if (eventListeners) {
            eventListeners.forEach(callback => {
                try {
                    callback(data);
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${event}:`, error);
                }
            });
        }
    }

    /**
     * –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ (debounced)
     */
    debouncedSave() {
        clearTimeout(this.saveTimeout);
        this.saveTimeout = setTimeout(() => {
            this.saveState();
        }, 1000);
    }

    /**
     * –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
     */
    async forceSave() {
        clearTimeout(this.saveTimeout);
        await this.saveState();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
     */
    getInfo() {
        return {
            initialized: this.isInitialized,
            demoMode: this.state.demoMode,
            apiAvailable: this.state.apiAvailable,
            userId: this.state.currentUserId,
            balance: this.state.balance,
            version: this.state.version,
            lastSync: this.state.lastSync
        };
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.GameStateManager = new GameStateManager();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–ª–∏–∞—Å –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.GameState = new Proxy({}, {
    get(target, prop) {
        return window.GameStateManager.get(prop) || window.GameStateManager.state[prop];
    },
    set(target, prop, value) {
        window.GameStateManager.set(prop, value);
        return true;
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = GameStateManager;
}