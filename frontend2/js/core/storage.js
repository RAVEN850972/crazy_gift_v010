/**
 * Storage Manager
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage, sessionStorage –∏ –æ–±–ª–∞—á–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
 */

class StorageManager {
    constructor() {
        this.prefix = 'crazygift_';
        this.cloudStorage = null;
        this.syncQueue = new Map();
        this.syncInProgress = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è
     */
    init() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
        if (window.telegramApp?.isFeatureSupported('cloudStorage')) {
            this.cloudStorage = window.telegramApp;
            console.log('‚úÖ –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ Telegram –¥–æ—Å—Ç—É–ø–Ω–æ');
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        this.setupAutoSync();
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async set(key, value, options = {}) {
        const {
            sync = false,
            persistent = true,
            encrypt = false
        } = options;

        const storageKey = this.prefix + key;
        let dataToStore = value;

        // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        if (encrypt) {
            dataToStore = this.encrypt(JSON.stringify(value));
        } else if (typeof value === 'object') {
            dataToStore = JSON.stringify(value);
        }

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            if (persistent) {
                localStorage.setItem(storageKey, dataToStore);
            } else {
                sessionStorage.setItem(storageKey, dataToStore);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            if (sync && this.cloudStorage) {
                this.syncQueue.set(key, { value, timestamp: Date.now(), encrypt });
                this.scheduleSyncToCloud();
            }

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async get(key, options = {}) {
        const {
            defaultValue = null,
            fromCloud = false,
            decrypt = false
        } = options;

        const storageKey = this.prefix + key;

        try {
            let data = null;

            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ–±–ª–∞–∫–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (fromCloud && this.cloudStorage) {
                try {
                    data = await this.cloudStorage.getCloudStorage(key);
                } catch (error) {
                    console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –æ–±–ª–∞–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', error);
                }
            }

            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–ª–∞–∫–∞, –±–µ—Ä–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            if (data === null) {
                data = localStorage.getItem(storageKey) || 
                       sessionStorage.getItem(storageKey);
            }

            if (data === null) {
                return defaultValue;
            }

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (decrypt) {
                data = this.decrypt(data);
            }

            // –ü–∞—Ä—Å–∏–Ω–≥ JSON
            try {
                return JSON.parse(data);
            } catch {
                return data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å –µ—Å–ª–∏ –Ω–µ JSON
            }

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return defaultValue;
        }
    }

    /**
     * –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async remove(key, options = {}) {
        const { fromCloud = false } = options;
        const storageKey = this.prefix + key;

        try {
            // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            localStorage.removeItem(storageKey);
            sessionStorage.removeItem(storageKey);

            // –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±–ª–∞–∫–∞ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (fromCloud && this.cloudStorage) {
                await this.cloudStorage.setCloudStorage(key, '');
            }

            // –£–¥–∞–ª—è–µ–º –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            this.syncQueue.delete(key);

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async clear(options = {}) {
        const { includeCloud = false } = options;

        try {
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
            const keysToRemove = [];
            
            for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key?.startsWith(this.prefix)) {
                    keysToRemove.push(key);
                }
            }

            // –£–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            keysToRemove.forEach(key => {
                localStorage.removeItem(key);
                const cleanKey = key.replace(this.prefix, '');
                this.syncQueue.delete(cleanKey);
            });

            // –û—á–∏—â–∞–µ–º sessionStorage
            for (let i = sessionStorage.length - 1; i >= 0; i--) {
                const key = sessionStorage.key(i);
                if (key?.startsWith(this.prefix)) {
                    sessionStorage.removeItem(key);
                }
            }

            // –û—á–∏—â–∞–µ–º –æ–±–ª–∞–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            if (includeCloud && this.cloudStorage) {
                // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—á–∏—Å—Ç–∫—É –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
                console.log('–û—á–∏—Å—Ç–∫–∞ –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
            }

            return true;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π
     */
    getKeys(persistent = true) {
        const storage = persistent ? localStorage : sessionStorage;
        const keys = [];
        
        for (let i = 0; i < storage.length; i++) {
            const key = storage.key(i);
            if (key?.startsWith(this.prefix)) {
                keys.push(key.replace(this.prefix, ''));
            }
        }
        
        return keys;
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º
     */
    async syncToCloud() {
        if (!this.cloudStorage || this.syncInProgress || this.syncQueue.size === 0) {
            return;
        }

        this.syncInProgress = true;
        console.log(`üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${this.syncQueue.size} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –æ–±–ª–∞–∫–æ–º...`);

        const syncPromises = [];
        const itemsToSync = Array.from(this.syncQueue.entries());

        for (const [key, data] of itemsToSync) {
            const syncPromise = this.syncSingleItem(key, data);
            syncPromises.push(syncPromise);
        }

        try {
            await Promise.allSettled(syncPromises);
            this.syncQueue.clear();
            console.log('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –æ–±–ª–∞–∫–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å –æ–±–ª–∞–∫–æ–º:', error);
        } finally {
            this.syncInProgress = false;
        }
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
     */
    async syncSingleItem(key, data) {
        try {
            let valueToSync = data.value;
            
            if (data.encrypt) {
                valueToSync = this.encrypt(JSON.stringify(data.value));
            } else if (typeof data.value === 'object') {
                valueToSync = JSON.stringify(data.value);
            }

            await this.cloudStorage.setCloudStorage(key, valueToSync);
            return true;
        } catch (error) {
            console.warn(`–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–∞ ${key}:`, error);
            return false;
        }
    }

    /**
     * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    scheduleSyncToCloud() {
        if (this.syncTimeout) {
            clearTimeout(this.syncTimeout);
        }

        this.syncTimeout = setTimeout(() => {
            this.syncToCloud();
        }, 2000); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
     */
    setupAutoSync() {
        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden && this.syncQueue.size > 0) {
                this.syncToCloud();
            }
        });

        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        window.addEventListener('beforeunload', () => {
            if (this.syncQueue.size > 0) {
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è beforeunload
                this.syncToCloudSync();
            }
        });
    }

    /**
     * –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è (–¥–ª—è beforeunload)
     */
    syncToCloudSync() {
        if (!this.cloudStorage || this.syncQueue.size === 0) return;

        try {
            for (const [key, data] of this.syncQueue) {
                let valueToSync = data.value;
                
                if (data.encrypt) {
                    valueToSync = this.encrypt(JSON.stringify(data.value));
                } else if (typeof data.value === 'object') {
                    valueToSync = JSON.stringify(data.value);
                }

                // –ò—Å–ø–æ–ª—å–∑—É–µ–º navigator.sendBeacon –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
                if (navigator.sendBeacon) {
                    const payload = JSON.stringify({ key, value: valueToSync });
                    navigator.sendBeacon('/api/sync', payload);
                }
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
        }
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (Base64)
     */
    encrypt(data) {
        try {
            return btoa(encodeURIComponent(data));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è:', error);
            return data;
        }
    }

    /**
     * –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞
     */
    decrypt(encryptedData) {
        try {
            return decodeURIComponent(atob(encryptedData));
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏:', error);
            return encryptedData;
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    getStorageSize() {
        let localSize = 0;
        let sessionSize = 0;

        // –†–∞–∑–º–µ—Ä localStorage
        for (let key in localStorage) {
            if (localStorage.hasOwnProperty(key) && key.startsWith(this.prefix)) {
                localSize += localStorage[key].length + key.length;
            }
        }

        // –†–∞–∑–º–µ—Ä sessionStorage
        for (let key in sessionStorage) {
            if (sessionStorage.hasOwnProperty(key) && key.startsWith(this.prefix)) {
                sessionSize += sessionStorage[key].length + key.length;
            }
        }

        return {
            localStorage: this.formatBytes(localSize),
            sessionStorage: this.formatBytes(sessionSize),
            total: this.formatBytes(localSize + sessionSize)
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –≤ –±–∞–π—Ç–∞—Ö
     */
    formatBytes(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
     */
    isStorageAvailable(type = 'localStorage') {
        try {
            const storage = window[type];
            const test = '__storage_test__';
            storage.setItem(test, test);
            storage.removeItem(test);
            return true;
        } catch (error) {
            return false;
        }
    }

    /**
     * –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async backup() {
        const backup = {
            timestamp: new Date().toISOString(),
            data: {}
        };

        const keys = this.getKeys();
        
        for (const key of keys) {
            try {
                backup.data[key] = await this.get(key);
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞ ${key}:`, error);
            }
        }

        return backup;
    }

    /**
     * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
     */
    async restore(backup, options = {}) {
        const { overwrite = false, sync = false } = options;

        if (!backup || !backup.data) {
            throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è');
        }

        let restored = 0;
        let skipped = 0;

        for (const [key, value] of Object.entries(backup.data)) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
                const existing = await this.get(key);
                
                if (existing !== null && !overwrite) {
                    skipped++;
                    continue;
                }

                await this.set(key, value, { sync });
                restored++;
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞ ${key}:`, error);
            }
        }

        return { restored, skipped };
    }

    /**
     * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
     */
    async migrate(migrations) {
        const currentVersion = await this.get('storage_version', { defaultValue: 0 });
        
        for (const migration of migrations) {
            if (migration.version > currentVersion) {
                try {
                    console.log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ v${migration.version}...`);
                    await migration.up(this);
                    await this.set('storage_version', migration.version, { sync: true });
                    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è v${migration.version} –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
                } catch (error) {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ v${migration.version}:`, error);
                    throw error;
                }
            }
        }
    }
}

// –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

class GameStorageManager extends StorageManager {
    constructor() {
        super();
        this.gamePrefix = 'game_';
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    async saveGameState(gameState) {
        return await this.set(this.gamePrefix + 'state', gameState, { 
            sync: true, 
            encrypt: false 
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
     */
    async loadGameState() {
        return await this.get(this.gamePrefix + 'state', { 
            defaultValue: this.getDefaultGameState(),
            fromCloud: true 
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async saveSettings(settings) {
        return await this.set(this.gamePrefix + 'settings', settings, { 
            sync: true 
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
     */
    async loadSettings() {
        return await this.get(this.gamePrefix + 'settings', { 
            defaultValue: this.getDefaultSettings(),
            fromCloud: true 
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    async saveTransactionHistory(history) {
        return await this.set(this.gamePrefix + 'transaction_history', history, { 
            persistent: true 
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    async loadTransactionHistory() {
        return await this.get(this.gamePrefix + 'transaction_history', { 
            defaultValue: [] 
        });
    }

    /**
     * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (–ª–æ–∫–∞–ª—å–Ω–æ)
     */
    async saveInventory(inventory) {
        return await this.set(this.gamePrefix + 'inventory', inventory, { 
            persistent: true 
        });
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
     */
    async loadInventory() {
        return await this.get(this.gamePrefix + 'inventory', { 
            defaultValue: [] 
        });
    }

    /**
     * –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultGameState() {
        return {
            balance: 0,
            demoMode: true,
            currentUserId: null,
            user: null,
            lastSync: null
        };
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
     */
    getDefaultSettings() {
        return {
            sound: true,
            vibration: false,
            language: 'en',
            notifications: true,
            autoSync: true
        };
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    async clearGameData() {
        const gameKeys = this.getKeys().filter(key => key.startsWith(this.gamePrefix));
        
        for (const key of gameKeys) {
            await this.remove(key, { fromCloud: true });
        }
        
        return gameKeys.length;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã
window.storage = new StorageManager();
window.gameStorage = new GameStorageManager();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = { StorageManager, GameStorageManager };
}