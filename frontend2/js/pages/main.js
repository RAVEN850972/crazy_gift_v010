/**
 * Main Page (Index) Script
 * –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –∫–µ–π—Å–∞–º–∏ –∏ –æ—Å–Ω–æ–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º
 */

class MainPageManager {
    constructor() {
        this.cases = [];
        this.featuredCase = null;
        this.isLoading = false;
        this.apiAvailable = false;
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
     */
    async init() {
        console.log('üè† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            this.apiAvailable = await window.apiClient.checkAvailability();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadData();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
            this.setupUI();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            console.log('‚úÖ –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', error);
            this.setupFallbackMode();
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    async loadData() {
        this.isLoading = true;
        
        try {
            if (this.apiAvailable) {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ–π—Å—ã –∏–∑ API
                await this.loadCasesFromAPI();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await this.updateUserBalance();
                
            } else {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                this.loadDemoCases();
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.loadDemoCases();
        } finally {
            this.isLoading = false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤ –∏–∑ API
     */
    async loadCasesFromAPI() {
        try {
            const response = await window.apiClient.getCases({ limit: 20 });
            this.cases = response.cases || [];
            this.featuredCase = this.cases.find(c => c.featured) || this.cases[0];
            
            console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.cases.length} –∫–µ–π—Å–æ–≤ –∏–∑ API`);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤ –∏–∑ API:', error);
            throw error;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –∫–µ–π—Å–æ–≤
     */
    loadDemoCases() {
        console.log('üé≠ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –∫–µ–π—Å–æ–≤...');
        
        this.cases = [
            {
                id: 'demo_mystery_box',
                name: 'Mystery Box',
                description: '–ö–æ—Ä–æ–±–∫–∞ —Å –∑–∞–≥–∞–¥–æ—á–Ω—ã–º–∏ –ø—Ä–∏–∑–∞–º–∏',
                price: 100,
                image: 'assets/images/cases/mystery_box.png',
                rarity: 'common',
                featured: true,
                items: [
                    { name: 'Gold Coin', rarity: 'common', chance: 45 },
                    { name: 'Silver Coin', rarity: 'rare', chance: 30 },
                    { name: 'Diamond', rarity: 'epic', chance: 20 },
                    { name: 'Golden Crown', rarity: 'legendary', chance: 5 }
                ]
            },
            {
                id: 'demo_treasure_chest',
                name: 'Treasure Chest',
                description: '–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏',
                price: 250,
                image: 'assets/images/cases/treasure_chest.png',
                rarity: 'rare'
            },
            {
                id: 'demo_royal_case',
                name: 'Royal Case',
                description: '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –∫–µ–π—Å —Å —Ä–µ–¥–∫–∏–º–∏ –ø—Ä–∏–∑–∞–º–∏',
                price: 500,
                image: 'assets/images/cases/royal_case.png',
                rarity: 'epic'
            },
            {
                id: 'demo_legendary_vault',
                name: 'Legendary Vault',
                description: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ',
                price: 1000,
                image: 'assets/images/cases/legendary_vault.png',
                rarity: 'legendary'
            }
        ];
        
        this.featuredCase = this.cases[0];
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    async updateUserBalance() {
        if (!this.apiAvailable || !window.GameState?.currentUserId) {
            return;
        }
        
        try {
            const balanceData = await window.apiClient.getUserBalance(window.GameState.currentUserId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            if (window.GameState) {
                window.GameState.balance = balanceData.balance || 0;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.updateBalanceDisplay(balanceData.balance || 0);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    setupUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º featured –∫–µ–π—Å
        this.updateFeaturedCase();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–∫—É –∫–µ–π—Å–æ–≤
        this.updateCasesGrid();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        this.updateBalanceDisplay(window.GameState?.balance || 0);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        this.showModeIndicator();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ featured –∫–µ–π—Å–∞
     */
    updateFeaturedCase() {
        const featuredSection = document.querySelector('.featured-case-section');
        if (!featuredSection || !this.featuredCase) return;

        featuredSection.innerHTML = `
            <div class="featured-case" onclick="mainPage.openCaseDetail('${this.featuredCase.id}')">
                <div class="featured-badge">Featured</div>
                <img src="${this.featuredCase.image}" alt="${this.featuredCase.name}" class="featured-case-image" onerror="this.src='assets/images/placeholder-case.png'">
                <h2 class="featured-case-name">${this.featuredCase.name}</h2>
                <p class="featured-case-description">${this.featuredCase.description}</p>
                <div class="featured-case-price">${this.featuredCase.price} üíé</div>
            </div>
        `;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –∫–µ–π—Å–æ–≤
     */
    updateCasesGrid() {
        const casesGrid = document.querySelector('.cases-grid');
        if (!casesGrid) return;

        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        casesGrid.innerHTML = '';

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–µ–π—Å—ã
        this.cases.forEach(caseItem => {
            if (caseItem.featured) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º featured –∫–µ–π—Å
            
            const caseElement = this.createCaseElement(caseItem);
            casesGrid.appendChild(caseElement);
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—è–≤–ª–µ–Ω–∏—è
        const caseCards = casesGrid.querySelectorAll('.case-card');
        caseCards.forEach((card, index) => {
            card.style.opacity = '0';
            card.style.transform = 'translateY(20px)';
            
            setTimeout(() => {
                card.style.transition = 'all 0.3s ease';
                card.style.opacity = '1';
                card.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–µ–π—Å–∞
     */
    createCaseElement(caseItem) {
        const caseElement = document.createElement('div');
        caseElement.className = 'case-card';
        caseElement.onclick = () => this.openCaseDetail(caseItem.id);
        
        caseElement.innerHTML = `
            <div class="case-rarity ${caseItem.rarity}"></div>
            <img src="${caseItem.image}" alt="${caseItem.name}" class="case-image" onerror="this.src='assets/images/placeholder-case.png'">
            <h3 class="case-name">${caseItem.name}</h3>
            <div class="case-price">${caseItem.price} üíé</div>
        `;
        
        return caseElement;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    updateBalanceDisplay(balance) {
        const balanceElements = document.querySelectorAll('.balance-amount');
        balanceElements.forEach(element => {
            if (element) {
                window.Utils.Animation.animateCounter(element, 
                    parseInt(element.textContent) || 0, 
                    balance, 
                    500
                );
            }
        });
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
     */
    showModeIndicator() {
        if (!this.apiAvailable) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –¥–µ–º–æ —Ä–µ–∂–∏–º–∞
            const indicator = document.createElement('div');
            indicator.className = 'demo-mode-indicator show';
            indicator.textContent = 'üé≠ –î–µ–º–æ —Ä–µ–∂–∏–º - –¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è';
            
            // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            const existing = document.querySelector('.demo-mode-indicator');
            if (existing) existing.remove();
            
            document.body.appendChild(indicator);
            
            // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            setTimeout(() => {
                indicator.classList.remove('show');
                setTimeout(() => indicator.remove(), 300);
            }, 5000);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        const balanceWidget = document.querySelector('.balance-widget');
        if (balanceWidget) {
            balanceWidget.onclick = () => {
                window.haptic?.ui.buttonPress();
                window.Utils.URL.navigateTo('balance.html');
            };
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                this.refreshData();
            }
        });

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ pull-to-refresh (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        this.setupPullToRefresh();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ pull-to-refresh
     */
    setupPullToRefresh() {
        let startY = 0;
        let pullDistance = 0;
        const threshold = 100;
        let isPulling = false;

        document.addEventListener('touchstart', (e) => {
            if (window.scrollY === 0) {
                startY = e.touches[0].clientY;
                isPulling = true;
            }
        });

        document.addEventListener('touchmove', (e) => {
            if (!isPulling) return;

            const currentY = e.touches[0].clientY;
            pullDistance = currentY - startY;

            if (pullDistance > 0 && window.scrollY === 0) {
                e.preventDefault();
                
                // –í–∏–∑—É–∞–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                const opacity = Math.min(pullDistance / threshold, 1);
                document.body.style.transform = `translateY(${Math.min(pullDistance * 0.5, 50)}px)`;
                document.body.style.opacity = 1 - (opacity * 0.2);
                
                if (pullDistance > threshold) {
                    window.haptic?.ui.success();
                }
            }
        });

        document.addEventListener('touchend', () => {
            if (isPulling && pullDistance > threshold) {
                this.refreshData();
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∏–ª–∏
            document.body.style.transform = '';
            document.body.style.opacity = '';
            
            isPulling = false;
            pullDistance = 0;
        });
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–µ–π—Å–∞
     */
    openCaseDetail(caseId) {
        window.haptic?.ui.buttonPress();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–µ–π—Å–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        sessionStorage.setItem('selectedCaseId', caseId);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–µ—Ç–∞–ª–µ–π
        window.Utils.URL.navigateTo('case-detail.html');
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
     */
    async refreshData() {
        if (this.isLoading) return;
        
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        try {
            this.isLoading = true;
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            this.showRefreshIndicator();
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadData();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            this.setupUI();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
            window.notifications?.success('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', { duration: 2000 });
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            window.notifications?.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
        } finally {
            this.isLoading = false;
            this.hideRefreshIndicator();
        }
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    showRefreshIndicator() {
        const indicator = document.createElement('div');
        indicator.className = 'refresh-indicator';
        indicator.innerHTML = `
            <div class="loading-spinner"></div>
            <span>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...</span>
        `;
        indicator.style.cssText = `
            position: fixed;
            top: calc(var(--header-height) + 10px);
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0, 0, 0, 0.8);
            color: white;
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            z-index: 1000;
            display: flex;
            align-items: center;
            gap: 8px;
            backdrop-filter: blur(10px);
        `;
        
        document.body.appendChild(indicator);
    }

    /**
     * –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     */
    hideRefreshIndicator() {
        const indicator = document.querySelector('.refresh-indicator');
        if (indicator) {
            setTimeout(() => indicator.remove(), 500);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback —Ä–µ–∂–∏–º–∞
     */
    setupFallbackMode() {
        console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback —Ä–µ–∂–∏–º–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        this.loadDemoCases();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
        this.setupUI();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.setupEventListeners();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        window.notifications?.warning('–†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ', {
            duration: 4000
        });
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–µ–π—Å–∞ –ø–æ ID
     */
    getCaseById(caseId) {
        return this.cases.find(c => c.id === caseId);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
     */
    canAffordCase(caseId) {
        const caseItem = this.getCaseById(caseId);
        if (!caseItem) return false;
        
        const balance = window.GameState?.balance || 0;
        return balance >= caseItem.price;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.mainPage = new MainPageManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.mainPage.init();
    });
} else {
    window.mainPage.init();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = MainPageManager;
}