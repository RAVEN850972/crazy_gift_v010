/**
 * Balance Page Script
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π TON –∏ Telegram Stars
 */

class BalancePageManager {
    constructor() {
        this.selectedMethod = 'stars';
        this.amount = 0;
        this.conversionRates = {
            stars: { rate: 0.02, currency: 'USD' }, // 1 star = $0.02
            ton: { rate: 2.5, currency: 'USD' }     // 1 TON = $2.5
        };
        this.isProcessing = false;
        this.apiAvailable = false;
        this.depositHistory = [];
        
        this.init();
    }

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∞–ª–∞–Ω—Å–∞
     */
    async init() {
        console.log('üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∞–ª–∞–Ω—Å–∞...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
            this.apiAvailable = await window.apiClient.checkAvailability();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º Back Button
            this.setupBackButton();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            await this.loadData();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º UI
            this.setupUI();
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
            this.setupEventListeners();
            
            console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –±–∞–ª–∞–Ω—Å–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∞–ª–∞–Ω—Å–∞:', error);
            this.setupFallbackMode();
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
     */
    setupBackButton() {
        if (window.telegramApp?.isAvailableAPI()) {
            window.telegramApp.showBackButton(() => {
                window.Utils.URL.navigateTo('index.html');
            });
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
     */
    async loadData() {
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            await this.updateCurrentBalance();
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–µ–ø–æ–∑–∏—Ç–æ–≤
            await this.loadDepositHistory();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç
            await this.updateConversionRates();
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.setupDemoData();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
     */
    async updateCurrentBalance() {
        if (!this.apiAvailable || !window.GameState?.currentUserId) {
            return;
        }
        
        try {
            const balanceData = await window.apiClient.getUserBalance(window.GameState.currentUserId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            if (window.GameState) {
                window.GameState.balance = balanceData.balance || 0;
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            this.updateBalanceDisplay(balanceData.balance || 0);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
     */
    async loadDepositHistory() {
        if (!this.apiAvailable || !window.GameState?.currentUserId) {
            this.depositHistory = this.getDemoHistory();
            return;
        }
        
        try {
            const historyData = await window.apiClient.getUserHistory(
                window.GameState.currentUserId, 
                { type: 'deposit', limit: 10 }
            );
            
            this.depositHistory = historyData.transactions || [];
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏:', error);
            this.depositHistory = this.getDemoHistory();
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
     */
    async updateConversionRates() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª –∑–∞–ø—Ä–æ—Å –∫ API –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫—É—Ä—Å—ã
        console.log('üí± –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
     */
    setupUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
        this.updateBalanceDisplay(window.GameState?.balance || 0);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ—Ç–æ–¥—ã –æ–ø–ª–∞—Ç—ã
        this.setupPaymentMethods();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã
        this.setupQuickAmounts();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
        this.setupAmountInput();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–µ–ø–æ–∑–∏—Ç–æ–≤
        this.updateDepositHistory();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∂–∏–º–∞
        this.showModeIndicator();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    updateBalanceDisplay(balance) {
        const balanceElement = document.querySelector('.current-balance-amount');
        if (balanceElement) {
            window.Utils.Animation.animateCounter(balanceElement, 
                parseInt(balanceElement.textContent) || 0, 
                balance, 
                800
            );
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º USD —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
        const usdElement = document.querySelector('.balance-usd-equivalent');
        if (usdElement) {
            const usdValue = (balance * 0.01).toFixed(2); // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
            usdElement.textContent = `‚âà $${usdValue}`;
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ—Ç–æ–¥–æ–≤ –æ–ø–ª–∞—Ç—ã
     */
    setupPaymentMethods() {
        const methods = document.querySelectorAll('.payment-method');
        
        methods.forEach(method => {
            method.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤
                methods.forEach(m => m.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É
                method.classList.add('active');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥
                this.selectedMethod = method.dataset.method;
                
                // Haptic feedback
                window.haptic?.ui.selection();
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
                this.updateConversion();
                
                console.log(`üí≥ –í—ã–±—Ä–∞–Ω –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: ${this.selectedMethod}`);
            });
        });
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const defaultMethod = document.querySelector('.payment-method.stars');
        if (defaultMethod) {
            defaultMethod.click();
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö —Å—É–º–º
     */
    setupQuickAmounts() {
        const quickAmounts = document.querySelectorAll('.quick-amount-btn');
        
        quickAmounts.forEach(btn => {
            btn.addEventListener('click', () => {
                // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —É –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                quickAmounts.forEach(b => b.classList.remove('active'));
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π
                btn.classList.add('active');
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É–º–º—É
                const amount = parseInt(btn.dataset.amount);
                this.setAmount(amount);
                
                // Haptic feedback
                window.haptic?.ui.buttonPress();
            });
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
     */
    setupAmountInput() {
        const amountInput = document.querySelector('.amount-input');
        if (!amountInput) return;
        
        amountInput.addEventListener('input', (e) => {
            const value = parseInt(e.target.value) || 0;
            this.setAmount(value);
            
            // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã —É –±—ã—Å—Ç—Ä—ã—Ö —Å—É–º–º
            document.querySelectorAll('.quick-amount-btn').forEach(btn => {
                btn.classList.remove('active');
            });
        });
        
        amountInput.addEventListener('focus', () => {
            amountInput.style.borderColor = 'var(--accent-yellow)';
        });
        
        amountInput.addEventListener('blur', () => {
            amountInput.style.borderColor = 'rgba(255, 255, 255, 0.1)';
        });
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É–º–º—ã
     */
    setAmount(amount) {
        this.amount = Math.max(0, amount);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        const amountInput = document.querySelector('.amount-input');
        if (amountInput && parseInt(amountInput.value) !== this.amount) {
            amountInput.value = this.amount || '';
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏—é
        this.updateConversion();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        this.updateDepositButton();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
     */
    updateConversion() {
        const conversionInfo = document.querySelector('.conversion-info');
        if (!conversionInfo || this.amount <= 0) {
            if (conversionInfo) {
                conversionInfo.style.display = 'none';
            }
            return;
        }
        
        const rate = this.conversionRates[this.selectedMethod];
        if (!rate) return;
        
        let convertedAmount;
        let displayText;
        
        if (this.selectedMethod === 'stars') {
            convertedAmount = Math.ceil(this.amount / rate.rate); // –û–∫—Ä—É–≥–ª—è–µ–º –≤–≤–µ—Ä—Ö –¥–ª—è –∑–≤–µ–∑–¥
            displayText = `${convertedAmount} ‚≠ê Telegram Stars`;
        } else if (this.selectedMethod === 'ton') {
            convertedAmount = (this.amount * rate.rate / 100).toFixed(4); // TON —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ 4 –∑–Ω–∞–∫–æ–≤
            displayText = `${convertedAmount} TON`;
        }
        
        conversionInfo.innerHTML = `
            <div class="conversion-rate">–ö—É—Ä—Å: 1 üíé = ${rate.rate} ${rate.currency}</div>
            <div class="conversion-amount">${displayText}</div>
        `;
        
        conversionInfo.style.display = 'block';
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
     */
    updateDepositButton() {
        const depositBtn = document.querySelector('.deposit-button');
        if (!depositBtn) return;
        
        const isEnabled = this.amount > 0 && !this.isProcessing;
        
        depositBtn.disabled = !isEnabled;
        depositBtn.style.opacity = isEnabled ? '1' : '0.5';
        depositBtn.style.cursor = isEnabled ? 'pointer' : 'not-allowed';
        
        if (this.isProcessing) {
            depositBtn.innerHTML = `
                <div class="loading-spinner"></div>
                –û–±—Ä–∞–±–æ—Ç–∫–∞...
            `;
        } else {
            depositBtn.innerHTML = `
                <span>–ü–æ–ø–æ–ª–Ω–∏—Ç—å ${this.amount} üíé</span>
                <img src="assets/icons/arrow_right.svg" alt="" class="deposit-button-icon">
            `;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
     */
    updateDepositHistory() {
        const historyList = document.querySelector('.deposit-history-list');
        const emptyState = document.querySelector('.deposit-history-empty');
        
        if (!historyList) return;
        
        if (this.depositHistory.length === 0) {
            historyList.style.display = 'none';
            if (emptyState) emptyState.style.display = 'block';
            return;
        }
        
        if (emptyState) emptyState.style.display = 'none';
        historyList.style.display = 'flex';
        historyList.innerHTML = '';
        
        this.depositHistory.slice(0, 5).forEach(deposit => {
            const item = document.createElement('div');
            item.className = 'deposit-history-item';
            
            item.innerHTML = `
                <div class="deposit-info">
                    <div class="deposit-method">${deposit.method === 'stars' ? '‚≠ê Telegram Stars' : 'üíé TON'}</div>
                    <div class="deposit-date">${window.Utils.Date.timeAgo(deposit.created_at)}</div>
                </div>
                <div class="deposit-amount">
                    +${deposit.amount} üíé
                    <div class="deposit-status ${deposit.status}">${deposit.status}</div>
                </div>
            `;
            
            historyList.appendChild(item);
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
     */
    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
        const depositBtn = document.querySelector('.deposit-button');
        if (depositBtn) {
            depositBtn.addEventListener('click', () => this.processDeposit());
        }
        
        // –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        const viewAllBtn = document.querySelector('.view-all-btn');
        if (viewAllBtn) {
            viewAllBtn.addEventListener('click', () => this.showFullHistory());
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ —Ñ–æ–∫—É—Å–µ
        document.addEventListener('visibilitychange', () => {
            if (!document.hidden) {
                this.updateCurrentBalance();
            }
        });
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–ø–æ–∑–∏—Ç–∞
     */
    async processDeposit() {
        if (this.isProcessing || this.amount <= 0) return;
        
        this.isProcessing = true;
        this.updateDepositButton();
        
        window.haptic?.ui.buttonPress();
        
        try {
            if (this.apiAvailable) {
                await this.processRealDeposit();
            } else {
                await this.processDemoDeposit();
            }
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞:', error);
            window.notifications?.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
            
        } finally {
            this.isProcessing = false;
            this.updateDepositButton();
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞
     */
    async processRealDeposit() {
        const loadingModal = window.modal?.loading('–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞...', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ');
        
        try {
            let paymentData;
            
            if (this.selectedMethod === 'stars') {
                // –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
                const starsAmount = Math.ceil(this.amount / this.conversionRates.stars.rate);
                paymentData = await window.apiClient.createStarsInvoice(
                    window.GameState.currentUserId,
                    starsAmount
                );
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–Ω–≤–æ–π—Å –≤ Telegram
                window.telegramApp?.openInvoice(paymentData.invoice_url, (result) => {
                    this.handlePaymentResult(result, paymentData.transaction_id);
                });
                
            } else if (this.selectedMethod === 'ton') {
                // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç TON
                paymentData = await window.apiClient.createTonDeposit(
                    window.GameState.currentUserId,
                    this.amount
                );
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º TON –∫–æ—à–µ–ª–µ–∫
                this.openTonPayment(paymentData);
            }
            
            window.modal?.hide(loadingModal);
            
        } catch (error) {
            window.modal?.hide(loadingModal);
            throw error;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–º–æ –¥–µ–ø–æ–∑–∏—Ç–∞
     */
    async processDemoDeposit() {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        const confirmed = await new Promise(resolve => {
            window.modal?.confirm(
                '–î–µ–º–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
                `–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ ${this.amount} üíé —á–µ—Ä–µ–∑ ${this.selectedMethod === 'stars' ? 'Telegram Stars' : 'TON'}?`,
                () => resolve(true)
            );
        });
        
        if (!confirmed) return;
        
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ
        if (window.GameState) {
            window.GameState.balance += this.amount;
            window.gameStorage?.saveGameState(window.GameState);
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        this.depositHistory.unshift({
            id: Date.now(),
            method: this.selectedMethod,
            amount: this.amount,
            status: 'completed',
            created_at: new Date().toISOString()
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        this.updateBalanceDisplay(window.GameState.balance);
        this.updateDepositHistory();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        window.notifications?.success('–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω!');
        window.haptic?.game.purchase();
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
        this.setAmount(0);
    }

    /**
     * –ü–æ–∫–∞–∑ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏
     */
    showFullHistory() {
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã –±—ã–ª–∞ –æ—Ç–¥–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        window.notifications?.info('–ü–æ–ª–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞');
        window.haptic?.ui.buttonPress();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
     */
    handlePaymentResult(result, transactionId) {
        if (result.status === 'paid') {
            // –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            this.updateCurrentBalance();
            this.loadDepositHistory();
            
            window.notifications?.success('–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!');
            window.haptic?.game.purchase();
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
            this.setAmount(0);
            
        } else if (result.status === 'cancelled') {
            window.notifications?.warning('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω');
            
        } else {
            window.notifications?.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞');
        }
    }

    /**
     * –û—Ç–∫—Ä—ã—Ç–∏–µ TON –ø–ª–∞—Ç–µ–∂–∞
     */
    openTonPayment(paymentData) {
        if (window.tonConnect?.isConnected()) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ TON Connect
            window.tonConnect.sendTransaction({
                to: paymentData.to_address,
                value: paymentData.amount,
                comment: paymentData.comment
            }).then(result => {
                this.handlePaymentResult({ status: 'paid' }, paymentData.transaction_id);
            }).catch(error => {
                console.error('TON payment error:', error);
                window.notifications?.error('–û—à–∏–±–∫–∞ TON –ø–ª–∞—Ç–µ–∂–∞');
            });
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º QR –∫–æ–¥ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            this.showTonQRCode(paymentData);
        }
    }

    /**
     * –ü–æ–∫–∞–∑ QR –∫–æ–¥–∞ –¥–ª—è TON –æ–ø–ª–∞—Ç—ã
     */
    showTonQRCode(paymentData) {
        const qrContent = `
            <div style="text-align: center;">
                <div style="background: white; padding: 20px; border-radius: 12px; display: inline-block; margin-bottom: 20px;">
                    <div id="qr-code"></div>
                </div>
                <p style="margin: 0; color: var(--text-muted); font-size: 14px;">
                    –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR –∫–æ–¥ –≤ TON –∫–æ—à–µ–ª—å–∫–µ
                </p>
                <p style="margin: 10px 0 0; color: var(--text-muted); font-size: 12px;">
                    –°—É–º–º–∞: ${paymentData.amount} TON
                </p>
            </div>
        `;
        
        window.modal?.create('ton-qr-modal', {
            title: '–û–ø–ª–∞—Ç–∞ TON',
            content: qrContent,
            size: 'medium',
            buttons: [{
                text: '–û—Ç–º–µ–Ω–∞',
                type: 'secondary',
                action: () => true
            }]
        });
        
        window.modal?.show('ton-qr-modal');
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º QR –∫–æ–¥ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É QR –∫–æ–¥–æ–≤)
        setTimeout(() => {
            const qrElement = document.getElementById('qr-code');
            if (qrElement) {
                qrElement.innerHTML = 'üì± QR Code';
                qrElement.style.cssText = 'font-size: 48px; padding: 20px;';
            }
        }, 100);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ –∏—Å—Ç–æ—Ä–∏–∏
     */
    getDemoHistory() {
        return [
            {
                id: 1,
                method: 'stars',
                amount: 100,
                status: 'completed',
                created_at: new Date(Date.now() - 86400000).toISOString()
            },
            {
                id: 2,
                method: 'ton',
                amount: 500,
                status: 'completed', 
                created_at: new Date(Date.now() - 172800000).toISOString()
            }
        ];
    }

    /**
     * –ü–æ–∫–∞–∑ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
     */
    showModeIndicator() {
        if (!this.apiAvailable) {
            const indicator = document.createElement('div');
            indicator.className = 'demo-mode-indicator show';
            indicator.textContent = 'üé≠ –î–µ–º–æ —Ä–µ–∂–∏–º - –ø–ª–∞—Ç–µ–∂–∏ –∏–º–∏—Ç–∏—Ä—É—é—Ç—Å—è';
            
            const existing = document.querySelector('.demo-mode-indicator');
            if (existing) existing.remove();
            
            document.body.appendChild(indicator);
            
            setTimeout(() => {
                indicator.classList.remove('show');
                setTimeout(() => indicator.remove(), 300);
            }, 5000);
        }
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback —Ä–µ–∂–∏–º–∞
     */
    setupFallbackMode() {
        console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ fallback —Ä–µ–∂–∏–º–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–∞–ª–∞–Ω—Å–∞');
        this.setupDemoData();
        this.setupUI();
        this.setupEventListeners();
        
        window.notifications?.warning('–†–∞–±–æ—Ç–∞–µ–º –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ', {
            duration: 4000
        });
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö
     */
    setupDemoData() {
        this.depositHistory = this.getDemoHistory();
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
window.balancePage = new BalancePageManager();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–≥–¥–∞ DOM –≥–æ—Ç–æ–≤
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.balancePage.init();
    });
} else {
    window.balancePage.init();
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –º–æ–¥—É–ª—è—Ö
if (typeof module !== 'undefined' && module.exports) {
    module.exports = BalancePageManager;
}