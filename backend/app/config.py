import os
from typing import List
from pydantic_settings import BaseSettings


class Settings(BaseSettings):
    # Database settings
    database_url: str = "sqlite+aiosqlite:///./database.db"
    # –î–ª—è PostgreSQL (–∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è):
    # database_url: str = "postgresql+asyncpg://user:password@localhost/crazygift"
    
    # Security
    secret_key: str = "your-super-secret-key-change-in-production"
    algorithm: str = "HS256"
    access_token_expire_minutes: int = 30
    
    # Telegram settings
    telegram_bot_token: str = ""
    telegram_webhook_secret: str = ""
    
    # TON settings
    ton_api_key: str = ""
    ton_wallet_address: str = ""
    ton_testnet: bool = True  # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    # Application settings
    debug: bool = True
    app_name: str = "CrazyGift API"
    app_version: str = "1.0.0"
    
    # CORS settings - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —Å–ø–∏—Å–∫–∞
    cors_origins: str = "*"
    
    class Config:
        env_file = ".env"
        case_sensitive = False

    @property
    def cors_origins_list(self) -> List[str]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å—Ç—Ä–æ–∫—É CORS origins –≤ —Å–ø–∏—Å–æ–∫"""
        if self.cors_origins == "*":
            return ["*"]
        return [origin.strip() for origin in self.cors_origins.split(",") if origin.strip()]


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫
settings = Settings()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
def validate_settings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    errors = []
    
    if not settings.telegram_bot_token:
        errors.append("TELEGRAM_BOT_TOKEN is required")
    
    if not settings.ton_wallet_address:
        errors.append("TON_WALLET_ADDRESS is required")
    
    if errors:
        raise ValueError(f"Configuration errors: {', '.join(errors)}")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ç–µ—Å—Ç–∞—Ö)
if not os.getenv("TESTING"):
    try:
        validate_settings()
    except ValueError as e:
        print(f"‚ö†Ô∏è  Warning: {e}")
        print("üìù Please create .env file with required settings")