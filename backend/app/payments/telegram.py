import httpx
import json
from typing import Optional, Dict, Any
from ..config import settings
import logging

logger = logging.getLogger(__name__)


class TelegramStarsService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Stars"""
    
    def __init__(self):
        self.bot_token = settings.telegram_bot_token
        self.api_url = f"https://api.telegram.org/bot{self.bot_token}"
    
    async def create_stars_invoice(self, user_id: int, stars_amount: int, telegram_user_id: int) -> str:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ Telegram Stars
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ
            stars_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
            telegram_user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω–≤–æ–π—Å
        """
        try:
            # –°–æ–∑–¥–∞–µ–º payload –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
            payload = json.dumps({
                "type": "stars_purchase",
                "user_id": user_id,
                "stars_amount": stars_amount,
                "timestamp": int(__import__("time").time())
            })
            
            invoice_data = {
                "title": "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                "description": f"–ü–æ–∫—É–ø–∫–∞ {stars_amount:,} –∑–≤—ë–∑–¥ –≤ CrazyGift",
                "payload": payload,
                "currency": "XTR",  # Telegram Stars currency code
                "prices": json.dumps([{
                    "label": f"{stars_amount:,} –∑–≤—ë–∑–¥",
                    "amount": stars_amount
                }])
            }
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.api_url}/createInvoiceLink",
                    data=invoice_data
                )
                
                if response.status_code != 200:
                    logger.error(f"Telegram API error: {response.status_code}")
                    raise Exception(f"Telegram API error: {response.status_code}")
                
                data = response.json()
                
                if not data.get("ok"):
                    error_msg = data.get("description", "Unknown error")
                    logger.error(f"Telegram API error: {error_msg}")
                    raise Exception(f"Telegram API error: {error_msg}")
                
                invoice_link = data["result"]
                logger.info(f"Created Stars invoice for user {user_id}: {stars_amount} stars")
                
                return invoice_link
                
        except Exception as e:
            logger.error(f"Failed to create Stars invoice: {str(e)}")
            raise
    
    async def verify_payment(self, payment_id: str) -> Optional[Dict[str, Any]]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ Telegram Stars
        
        Args:
            payment_id: ID –ø–ª–∞—Ç–µ–∂–∞ –æ—Ç Telegram
            
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ –∏–ª–∏ None
        """
        try:
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ä–µ–∞–ª—å–Ω–æ–º API Telegram –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞
            # –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID. –û–±—ã—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–∏—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ webhook
            # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.api_url}/getPayment",  # –ì–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥
                    json={"payment_id": payment_id}
                )
                
                if response.status_code != 200:
                    return None
                
                data = response.json()
                
                if not data.get("ok"):
                    return None
                
                payment_info = data.get("result", {})
                
                return {
                    "payment_id": payment_id,
                    "amount": payment_info.get("total_amount"),
                    "currency": payment_info.get("currency"),
                    "status": payment_info.get("status"),
                    "payload": payment_info.get("invoice_payload"),
                    "user_id": payment_info.get("from", {}).get("id"),
                    "paid_at": payment_info.get("payment_date")
                }
                
        except Exception as e:
            logger.error(f"Error verifying Stars payment: {str(e)}")
            return None
    
    async def send_message(self, chat_id: int, text: str) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            chat_id: Telegram chat ID
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(
                    f"{self.api_url}/sendMessage",
                    json={
                        "chat_id": chat_id,
                        "text": text,
                        "parse_mode": "Markdown"
                    }
                )
                
                if response.status_code != 200:
                    return False
                
                data = response.json()
                return data.get("ok", False)
                
        except Exception as e:
            logger.error(f"Error sending message: {str(e)}")
            return False
    
    async def notify_payment_success(self, telegram_user_id: int, stars_amount: int, new_balance: int) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
        
        Args:
            telegram_user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            stars_amount: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –∑–≤–µ–∑–¥
            new_balance: –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        message = f"""
üéâ *–ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!*

üí∞ –ü–æ–ª—É—á–µ–Ω–æ: {stars_amount:,} –∑–≤—ë–∑–¥
‚≠ê –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance:,} –∑–≤—ë–∑–¥

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞—Ç—å –ø—Ä–∏–∑—ã!
        """.strip()
        
        return await self.send_message(telegram_user_id, message)
    
    async def notify_payment_failed(self, telegram_user_id: int, reason: str = "") -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ
        
        Args:
            telegram_user_id: Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            reason: –ü—Ä–∏—á–∏–Ω–∞ –Ω–µ—É–¥–∞—á–∏
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        """
        message = f"""
‚ùå *–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–∞*

–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –ø–ª–∞—Ç—ë–∂.
{f"–ü—Ä–∏—á–∏–Ω–∞: {reason}" if reason else ""}

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.
        """.strip()
        
        return await self.send_message(telegram_user_id, message)
    
    def parse_payment_payload(self, payload: str) -> Optional[Dict[str, Any]]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ payload –∏–∑ –ø–ª–∞—Ç–µ–∂–∞
        
        Args:
            payload: JSON —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞
            
        Returns:
            –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None
        """
        try:
            data = json.loads(payload)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if data.get("type") != "stars_purchase":
                return None
            
            if "user_id" not in data or "stars_amount" not in data:
                return None
            
            return data
            
        except (json.JSONDecodeError, KeyError) as e:
            logger.error(f"Error parsing payment payload: {str(e)}")
            return None
    
    async def get_bot_info(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        
        Returns:
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏–ª–∏ None
        """
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(f"{self.api_url}/getMe")
                
                if response.status_code != 200:
                    return None
                
                data = response.json()
                
                if not data.get("ok"):
                    return None
                
                return data.get("result")
                
        except Exception as e:
            logger.error(f"Error getting bot info: {str(e)}")
            return None


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
telegram_service = TelegramStarsService()