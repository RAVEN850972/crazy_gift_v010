from contextlib import asynccontextmanager
from fastapi import FastAPI, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.exceptions import RequestValidationError
import time
import logging

from .config import settings
from .database import init_db, close_db


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO if settings.debug else logging.WARNING,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # Startup
    logger.info("üöÄ Starting CrazyGift API...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if settings.debug:
        await load_test_data()
    
    logger.info("‚úÖ CrazyGift API started successfully")
    
    yield
    
    # Shutdown
    logger.info("üîÑ Shutting down CrazyGift API...")
    await close_db()
    logger.info("‚úÖ CrazyGift API stopped")


# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
app = FastAPI(
    title=settings.app_name,
    version=settings.app_version,
    description="Backend API for CrazyGift Telegram WebApp Casino",
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None,
    lifespan=lifespan
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS\
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.cors_origins_list,
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"],
)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤

# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º preflight OPTIONS –∑–∞–ø—Ä–æ—Å—ã
    if request.method == "OPTIONS":
        response = JSONResponse(content={}, status_code=200)
        response.headers["Access-Control-Allow-Origin"] = "*"
        response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
        response.headers["Access-Control-Allow-Headers"] = "*"
        response.headers["Access-Control-Max-Age"] = "3600"
        return response
    
    start_time = time.time()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å
    logger.info(f"üîµ {request.method} {request.url.path}")
    
    response = await call_next(request)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    process_time = time.time() - start_time
    logger.info(f"üü¢ {request.method} {request.url.path} - {response.status_code} - {process_time:.3f}s")
    
    return response


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    return JSONResponse(
        status_code=status.HTTP_422_UNPROCESSABLE_ENTITY,
        content={
            "error": "Validation Error",
            "message": "Invalid request data",
            "details": exc.errors()
        }
    )


@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    logger.error(f"‚ùå Unhandled exception: {str(exc)}", exc_info=True)
    
    return JSONResponse(
        status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
        content={
            "error": "Internal Server Error",
            "message": "An unexpected error occurred",
            "details": str(exc) if settings.debug else None
        }
    )


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤
from .api import users, cases, payments, inventory


# Health check endpoints
@app.get("/health")
@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    return {
        "status": "healthy",
        "version": "1.0.0",
        "timestamp": time.time()
    }

app.include_router(users.router, prefix="/api/users", tags=["Users"])
app.include_router(cases.router, prefix="/api/cases", tags=["Cases"])
app.include_router(payments.router, prefix="/api/payments", tags=["Payments"])
app.include_router(inventory.router, prefix="/api/inventory", tags=["Inventory"])


# –û—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "CrazyGift API is running",
        "version": settings.app_version,
        "status": "healthy",
        "docs": "/docs" if settings.debug else "disabled in production"
    }


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞"""
    return {
        "status": "healthy",
        "timestamp": time.time(),
        "version": settings.app_version
    }


@app.get("/api/stats")
async def get_public_stats():
    """–ü—É–±–ª–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    from sqlalchemy import select, func
    from .database import AsyncSessionLocal
    from .models import User, Transaction, Case
    
    async with AsyncSessionLocal() as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_count = await db.scalar(select(func.count(User.id)))
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤
        total_cases_opened = await db.scalar(select(func.sum(User.total_cases_opened))) or 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–µ–π—Å—ã
        active_cases = await db.scalar(select(func.count(Case.id)).where(Case.active == True))
        
        return {
            "total_users": users_count or 0,
            "total_cases_opened": total_cases_opened,
            "active_cases": active_cases or 0,
            "online_now": "~300"  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        }


async def load_test_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
    import json
    from sqlalchemy import select, func  # –î–æ–±–∞–≤–∏–ª–∏ func
    from .database import AsyncSessionLocal
    from .models import Case
    
    logger.info("üì¶ Loading test data...")
    
    async with AsyncSessionLocal() as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–µ–π—Å—ã
        existing_cases = await db.scalar(select(func.count(Case.id)))
        
        if existing_cases > 0:
            logger.info("Test data already exists, skipping...")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã
        test_cases = [
            {
                "name": "Telegram Case #1",
                "description": "–ë–∞–∑–æ–≤—ã–π –∫–µ–π—Å —Å –æ–±—ã—á–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
                "price_stars": 150,
                "category": "basic",
                "image_url": "assets/cases/case1.png",
                "items": [
                    {"id": 1, "name": "Blue Bow Tie", "value": 25.6, "stars": 2556, "rarity": "common", "weight": 40, "image": "assets/gifts/gift2.png"},
                    {"id": 2, "name": "Pink Teddy Bear", "value": 45.5, "stars": 4550, "rarity": "common", "weight": 30, "image": "assets/gifts/gift3.png"},
                    {"id": 3, "name": "Telegram Cap", "value": 65.0, "stars": 6500, "rarity": "rare", "weight": 20, "image": "assets/gifts/gift4.png"},
                    {"id": 4, "name": "Golden Star", "value": 125.0, "stars": 12500, "rarity": "epic", "weight": 10, "image": "assets/gifts/gift5.png"}
                ]
            },
            {
                "name": "Telegram Case #2", 
                "description": "–£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–µ–π—Å —Å —Ä–µ–¥–∫–∏–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
                "price_stars": 250,
                "category": "premium",
                "image_url": "assets/cases/case2.png",
                "items": [
                    {"id": 5, "name": "Magic Hat", "value": 85.0, "stars": 8500, "rarity": "rare", "weight": 35, "image": "assets/gifts/gift6.png"},
                    {"id": 6, "name": "Diamond Ring", "value": 180.5, "stars": 18050, "rarity": "epic", "weight": 25, "image": "assets/gifts/gift7.png"},
                    {"id": 7, "name": "Crown", "value": 350.0, "stars": 35000, "rarity": "legendary", "weight": 15, "image": "assets/gifts/gift8.png"},
                    {"id": 8, "name": "Mystic Scroll", "value": 750.0, "stars": 75000, "rarity": "mythic", "weight": 5, "image": "assets/gifts/gift9.png"}
                ]
            },
            {
                "name": "Premium Case",
                "description": "–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –∫–µ–π—Å —Å –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–º–∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏",
                "price_stars": 500,
                "category": "premium",
                "image_url": "assets/cases/case_mock.png",
                "items": [
                    {"id": 9, "name": "Rare Artifact", "value": 450.0, "stars": 45000, "rarity": "legendary", "weight": 40, "image": "assets/gifts/gift10.png"},
                    {"id": 10, "name": "Ancient Relic", "value": 850.0, "stars": 85000, "rarity": "mythic", "weight": 30, "image": "assets/gifts/gift11.png"},
                    {"id": 11, "name": "Dragon Egg", "value": 1500.0, "stars": 150000, "rarity": "mythic", "weight": 20, "image": "assets/gifts/gift12.png"},
                    {"id": 12, "name": "Ultimate Prize", "value": 3000.0, "stars": 300000, "rarity": "mythic", "weight": 10, "image": "assets/gifts/gift1.png"}
                ]
            }
        ]
        
        for case_data in test_cases:
            case = Case(
                name=case_data["name"],
                description=case_data["description"],
                price_stars=case_data["price_stars"],
                category=case_data["category"],
                image_url=case_data["image_url"],
                items=json.dumps(case_data["items"]),
                active=True
            )
            db.add(case)
        
        await db.commit()
        logger.info(f"‚úÖ Created {len(test_cases)} test cases")


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "app.main:app",
        host="0.0.0.0",
        port=8000,
        reload=settings.debug,
        log_level="info" if settings.debug else "warning"
    )