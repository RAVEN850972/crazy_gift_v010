// ===================================================================
// profile.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
// ===================================================================

// === API –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –î–õ–Ø –ò–ù–í–ï–ù–¢–ê–†–Ø ===

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è —Å API
 */
async function initializeProfilePageWithAPI() {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await updateBalanceFromAPI();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        await loadInventoryFromAPI();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await loadUserProfileFromAPI();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∏–∑ API
 * –ó–ê–ú–ï–ù–Ø–ï–¢ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤
 */
async function loadInventoryFromAPI() {
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        showInventoryLoader();
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        const inventory = await loadInventoryWithAPI();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∞–ª—å–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        renderInventoryGrid(inventory.items || []);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        updateInventoryStats(inventory);
        
        console.log('‚úÖ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –∑–∞–≥—Ä—É–∂–µ–Ω:', inventory.items?.length || 0, '–ø—Ä–µ–¥–º–µ—Ç–æ–≤');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è:', error);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        showInventoryError();
    } finally {
        hideInventoryLoader();
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä —Å–µ—Ç–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 * –ó–ê–ú–ï–ù–Ø–ï–¢ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å –º–æ–∫-–¥–∞–Ω–Ω—ã–º–∏
 */
function renderInventoryGrid(items) {
    const inventoryGrid = document.querySelector('.inventory-grid, .items-grid');
    if (!inventoryGrid) return;
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    inventoryGrid.innerHTML = '';
    
    if (!items || items.length === 0) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—É—Å—Ç–æ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        inventoryGrid.innerHTML = `
            <div class="empty-inventory">
                <div class="empty-icon">üì¶</div>
                <div class="empty-title">–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</div>
                <div class="empty-subtitle">–û—Ç–∫—Ä–æ–π—Ç–µ –∫–µ–π—Å—ã —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã</div>
                <button class="empty-button" onclick="window.location.href='index.html'">
                    –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–µ–π—Å–∞–º
                </button>
            </div>
        `;
        return;
    }
    
    // –†–µ–Ω–¥–µ—Ä–∏–º –ø—Ä–µ–¥–º–µ—Ç—ã
    items.forEach((item, index) => {
        const itemCard = document.createElement('div');
        itemCard.className = 'inventory-item';
        itemCard.setAttribute('data-item-id', item.id);
        itemCard.style.animationDelay = `${index * 0.05}s`;
        
        itemCard.innerHTML = `
            <div class="item-rarity rarity-${item.rarity}"></div>
            <div class="item-image">
                <img src="${item.image_url || 'assets/items/default.png'}" 
                     alt="${item.item_name}"
                     onerror="this.src='assets/items/default.png'">
            </div>
            <div class="item-info">
                <div class="item-name">${item.item_name}</div>
                <div class="item-value">
                    ${item.item_stars.toLocaleString()}
                    <img src="assets/icons/star_icon.png" alt="Stars">
                </div>
            </div>
            <div class="item-actions">
                <button class="sell-button" onclick="sellInventoryItem(${item.id})">
                    –ü—Ä–æ–¥–∞—Ç—å
                </button>
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        itemCard.addEventListener('click', (e) => {
            if (!e.target.closest('.sell-button')) {
                showItemDetails(item);
            }
        });
        
        inventoryGrid.appendChild(itemCard);
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function updateInventoryStats(inventory) {
    // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const totalValueElement = document.querySelector('.total-value, .inventory-value');
    if (totalValueElement && inventory.total_value !== undefined) {
        totalValueElement.textContent = inventory.total_value.toLocaleString();
    }
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    const itemCountElement = document.querySelector('.item-count, .inventory-count');
    if (itemCountElement && inventory.items) {
        itemCountElement.textContent = inventory.items.length;
    }
}

/**
 * –ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 * –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–ï —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
 */
window.sellInventoryItem = async function(itemId) {
    if (!itemId) {
        console.error('Item ID –Ω–µ —É–∫–∞–∑–∞–Ω');
        return;
    }
    
    try {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        const confirmed = await showSellConfirmation(itemId);
        if (!confirmed) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª–æ–∞–¥–µ—Ä
        showSellLoader(itemId);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
        const result = await sellItemWithAPI(itemId);
        
        if (result.success) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            showNotification(`–ü—Ä–µ–¥–º–µ—Ç –ø—Ä–æ–¥–∞–Ω –∑–∞ ${result.earned_stars} –∑–≤—ë–∑–¥`, 'success');
            
            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ UI
            removeItemFromGrid(itemId);
            
            // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
            setTimeout(() => loadInventoryFromAPI(), 1000);
            
        } else {
            throw new Error(result.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç–∞:', error);
        
        showNotification(error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞', 'error');
    } finally {
        hideSellLoader(itemId);
    }
};

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
async function loadUserProfileFromAPI() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
        const profile = await getUserProfileWithAPI();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è –≤ UI
        updateProfileInfo(profile);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤ UI
 */
function updateProfileInfo(profile) {
    // –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usernameElement = document.querySelector('.username, .profile-name');
    if (usernameElement) {
        const displayName = profile.first_name || profile.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        usernameElement.textContent = displayName;
    }
    
    // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∫–µ–π—Å–æ–≤
    const casesOpenedElement = document.querySelector('.cases-opened, .total-cases');
    if (casesOpenedElement && profile.total_cases_opened !== undefined) {
        casesOpenedElement.textContent = profile.total_cases_opened;
    }
    
    // –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const joinDateElement = document.querySelector('.join-date, .member-since');
    if (joinDateElement && profile.created_at) {
        const joinDate = new Date(profile.created_at).toLocaleDateString('ru-RU');
        joinDateElement.textContent = `–£—á–∞—Å—Ç–Ω–∏–∫ —Å ${joinDate}`;
    }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function showInventoryLoader() {
    const inventoryGrid = document.querySelector('.inventory-grid, .items-grid');
    if (inventoryGrid) {
        inventoryGrid.innerHTML = `
            <div class="inventory-loader">
                <div class="loader-spinner"></div>
                <div class="loader-text">–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è...</div>
            </div>
        `;
    }
}

/**
 * –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function hideInventoryLoader() {
    const loader = document.querySelector('.inventory-loader');
    if (loader) {
        loader.remove();
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
 */
function showInventoryError() {
    const inventoryGrid = document.querySelector('.inventory-grid, .items-grid');
    if (inventoryGrid) {
        inventoryGrid.innerHTML = `
            <div class="inventory-error">
                <div class="error-icon">‚ö†Ô∏è</div>
                <div class="error-title">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</div>
                <div class="error-subtitle">–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å</div>
                <button class="retry-button" onclick="loadInventoryFromAPI()">
                    –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
            </div>
        `;
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∂–∏
 */
async function showSellConfirmation(itemId) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (typeof showConfirmModal === 'function') {
        return await showConfirmModal('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç?');
    }
    
    // –ü—Ä–æ—Å—Ç–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    return confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ–¥–º–µ—Ç?');
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–∞–¥–µ—Ä –ø—Ä–æ–¥–∞–∂–∏
 */
function showSellLoader(itemId) {
    const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
    if (itemElement) {
        const sellButton = itemElement.querySelector('.sell-button');
        if (sellButton) {
            sellButton.textContent = '–ü—Ä–æ–¥–∞—ë–º...';
            sellButton.disabled = true;
        }
    }
}

/**
 * –°–∫—Ä—ã—Ç—å –ª–æ–∞–¥–µ—Ä –ø—Ä–æ–¥–∞–∂–∏
 */
function hideSellLoader(itemId) {
    const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
    if (itemElement) {
        const sellButton = itemElement.querySelector('.sell-button');
        if (sellButton) {
            sellButton.textContent = '–ü—Ä–æ–¥–∞—Ç—å';
            sellButton.disabled = false;
        }
    }
}

/**
 * –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –∏–∑ —Å–µ—Ç–∫–∏
 */
function removeItemFromGrid(itemId) {
    const itemElement = document.querySelector(`[data-item-id="${itemId}"]`);
    if (itemElement) {
        itemElement.style.animation = 'fadeOut 0.3s ease-out';
        setTimeout(() => {
            itemElement.remove();
        }, 300);
    }
}

/**
 * –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
 */
function showItemDetails(item) {
    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (typeof showItemModal === 'function') {
        showItemModal(item);
        return;
    }
    
    // –ü—Ä–æ—Å—Ç–æ–π alert —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    alert(`${item.item_name}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${item.item_stars} –∑–≤—ë–∑–¥\n–†–µ–¥–∫–æ—Å—Ç—å: ${item.rarity}`);
}

// === –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏) ===

// Global state
let currentFilter = 'all';
let sortBy = 'newest';

// Initialize Telegram WebApp
function initTelegramApp() {
    if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        tg.setHeaderColor('bg_color');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        if (tg.MainButton) {
            tg.MainButton.hide();
        }
    }
}

// Filter inventory items
function filterItems(filter) {
    currentFilter = filter;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –≤ UI
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.filter === filter) {
            btn.classList.add('active');
        }
    });
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å —Ñ–∏–ª—å—Ç—Ä–æ–º (–µ—Å–ª–∏ API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
    loadInventoryFromAPI();
}

// Sort inventory items
function sortItems(sortType) {
    sortBy = sortType;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≤ UI
    document.querySelectorAll('.sort-btn').forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.sort === sortType) {
            btn.classList.add('active');
        }
    });
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π
    loadInventoryFromAPI();
}

// Update balance
function updateBalance() {
    const balanceElement = document.getElementById('balance');
    if (balanceElement && window.GameState?.balance) {
        balanceElement.textContent = window.GameState.balance.toLocaleString();
    }
}

// Navigation functions
function goBack() {
    if (window.Telegram?.WebApp?.close) {
        window.Telegram.WebApp.close();
    } else {
        window.history.back();
    }
}

function navigateToBalance() {
    window.location.href = 'balance.html';
}

function navigateToSettings() {
    window.location.href = 'settings.html';
}

function navigateToUpgrade() {
    window.location.href = 'upgrade.html';
}

// Show notification function
function showNotification(message, type = 'info') {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
        </div>
    `;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        background: ${type === 'error' ? '#ff4757' : type === 'success' ? '#2ed573' : '#5352ed'};
        color: white;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateX(100%);
        transition: transform 0.3s ease-out;
    `;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// Stats management
function updateStats() {
    const stats = {
        totalItems: 0,
        totalValue: 0,
        itemsByRarity: {
            common: 0,
            rare: 0,
            epic: 0,
            legendary: 0,
            mythic: 0
        }
    };
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ UI
    document.querySelector('.stat-items .stat-value').textContent = stats.totalItems;
    document.querySelector('.stat-value .stat-value').textContent = stats.totalValue.toLocaleString();
}

// Initialize page when DOM is loaded
document.addEventListener('DOMContentLoaded', async function() {
    // API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–æ—Ñ–∏–ª—è
    await initializeProfilePageWithAPI();
    
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initTelegramApp();
    updateBalance();
    updateStats();
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
    document.querySelectorAll('.filter-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            filterItems(btn.dataset.filter);
        });
    });
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    document.querySelectorAll('.sort-btn').forEach(btn => {
        btn.addEventListener('click', () => {
            sortItems(btn.dataset.sort);
        });
    });
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const backButton = document.querySelector('.app-logo, .back-button');
    if (backButton) {
        backButton.addEventListener('click', goBack);
    }
    
    const balanceWidget = document.querySelector('.balance-widget');
    if (balanceWidget) {
        balanceWidget.addEventListener('click', navigateToBalance);
    }
    
    const settingsButton = document.querySelector('.settings-button');
    if (settingsButton) {
        settingsButton.addEventListener('click', navigateToSettings);
    }
    
    const upgradeButton = document.querySelector('.upgrade-button');
    if (upgradeButton) {
        upgradeButton.addEventListener('click', navigateToUpgrade);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–µ—Å–ª–∏ –Ω–µ –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ)
    setInterval(() => {
        if (!window.GameState?.demoMode && window.GameState?.authenticated) {
            loadInventoryFromAPI();
        }
    }, 30000);
});