// ===================================================================
// main.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
// ===================================================================

// === API –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π API
 * –î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ DOMContentLoaded –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
 */
async function initializeAppWithAPI() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CrazyGift —Å API –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π...');
    
    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞
    if (window.APIDetector) {
        await window.APIDetector.initializeApp();
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω
    await loadCasesForHomePage();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ API
    await updateBalanceFromAPI();
    
    console.log('‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ');
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–µ–π—Å–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * –ó–ê–ú–ï–ù–Ø–ï–¢ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –∫–µ–π—Å–æ–≤
 */
async function loadCasesForHomePage() {
    try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–µ–π—Å–æ–≤
        const cases = await loadCasesWithAPI();
        
        // –†–µ–Ω–¥–µ—Ä–∏–º –∫–µ–π—Å—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        if (window.location.pathname.includes('index.html') || window.location.pathname === '/') {
            renderCasesGrid(cases);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–µ–π—Å–æ–≤:', error);
    }
}

/**
 * –†–µ–Ω–¥–µ—Ä —Å–µ—Ç–∫–∏ –∫–µ–π—Å–æ–≤
 * –ó–ê–ú–ï–ù–Ø–ï–¢ —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É —Å –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function renderCasesGrid(cases) {
    const casesGrid = document.querySelector('.cases-grid');
    if (!casesGrid) return;
    
    // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    casesGrid.innerHTML = '';
    
    // –†–µ–Ω–¥–µ—Ä–∏–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–µ–π—Å—ã
    cases.forEach((caseItem, index) => {
        const caseCard = document.createElement('div');
        caseCard.className = 'case-card';
        caseCard.style.animationDelay = `${index * 0.1}s`;
        
        caseCard.innerHTML = `
            <div class="case-image">
                <img src="${caseItem.image_url || 'assets/cases/default.png'}" 
                     alt="${caseItem.name}" 
                     onerror="this.src='assets/cases/default.png'">
            </div>
            <div class="case-title">${caseItem.name}</div>
            <div class="case-price">
                ${caseItem.price_stars.toLocaleString()}
                <img src="assets/icons/star_icon.png" alt="Stars">
            </div>
        `;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        caseCard.addEventListener('click', () => {
            openCase(caseItem.id);
        });
        
        casesGrid.appendChild(caseCard);
    });
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ API
 * –ó–ê–ú–ï–ù–Ø–ï–¢ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 */
async function updateBalanceFromAPI() {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –æ–±–µ—Ä—Ç–∫—É
        await updateBalanceWithAPI();
        
        console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω:', window.GameState.balance);
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', error);
    }
}

// === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø ===

/**
 * –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ updateBalance() –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
 */
const originalUpdateBalance = window.updateBalance;
window.updateBalance = async function() {
    if (window.GameState?.demoMode) {
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        const balanceElement = document.getElementById('balance');
        if (balanceElement && GameState.balance > 0) {
            balanceElement.textContent = GameState.balance.toLocaleString();
        }
        return;
    }
    
    // –í API —Ä–µ–∂–∏–º–µ –æ–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä
    await updateBalanceFromAPI();
};

// === –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î (—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏) ===

// Global state
const GameState = {
    balance: 0, // –£–¥–∞–ª–µ–Ω–æ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 1451
    currentPage: 'home',
    user: null
};

// Glow effect extractor
const glowExtractor = {
    processedImages: new Map(),
    canvas: document.createElement('canvas'),
    ctx: null,
    fallbackColors: [
        '255, 215, 0',    // –ó–æ–ª–æ—Ç–æ
        '138, 43, 226',   // –§–∏–æ–ª–µ—Ç  
        '255, 20, 147',   // –†–æ–∑–æ–≤—ã–π
        '0, 191, 255',    // –ì–æ–ª—É–±–æ–π
        '50, 205, 50',    // –ó–µ–ª–µ–Ω—ã–π
        '255, 69, 0',     // –ö—Ä–∞—Å–Ω–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π
        '255, 140, 0',    // –û—Ä–∞–Ω–∂–µ–≤—ã–π
        '30, 144, 255'    // –°–∏–Ω–∏–π
    ],

    init() {
        this.ctx = this.canvas.getContext('2d');
        this.canvas.width = 100;
        this.canvas.height = 100;
    },

    async processAllLiveItems() {
        const itemImages = document.querySelectorAll('.case-card img, .item-image img, .inventory-item img');
        
        for (const img of itemImages) {
            if (img.complete && img.naturalHeight !== 0) {
                await this.processImage(img);
            } else {
                img.onload = () => this.processImage(img);
            }
        }
    },

    async processImage(img) {
        try {
            const dominantColor = await this.extractDominantColor(img);
            this.applyGlowEffect(img, dominantColor);
        } catch (error) {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', img.src);
            const fallbackColor = this.extractColorFromFilename(img.src);
            this.applyGlowEffect(img, fallbackColor);
        }
    },

    applyGlowEffect(img, color) {
        const container = img.closest('.case-card, .item-card, .inventory-item');
        if (container) {
            container.style.setProperty('--glow-color', color);
            container.classList.add('glow-effect');
        }
    },

    extractColorFromFilename(src) {
        if (src.includes('gold') || src.includes('legendary')) {
            return '255, 215, 0';
        } else if (src.includes('purple') || src.includes('epic')) {
            return '138, 43, 226';
        } else if (src.includes('blue') || src.includes('rare')) {
            return '30, 144, 255';
        } else if (src.includes('green') || src.includes('uncommon')) {
            return '50, 205, 50';
        } else {
            // –°–ª—É—á–∞–π–Ω—ã–π —Ü–≤–µ—Ç –∏–∑ –ø–∞–ª–∏—Ç—Ä—ã
            const hash = this.simpleHash(src);
            return this.fallbackColors[hash % this.fallbackColors.length];
        }
    },

    simpleHash(str) {
        let hash = 0;
        for (let i = 0; i < str.length; i++) {
            const char = str.charCodeAt(i);
            hash = ((hash << 5) - hash) + char;
            hash = hash & hash;
        }
        return Math.abs(hash);
    },

    async extractDominantColor(img) {
        const cacheKey = img.src;
        if (this.processedImages.has(cacheKey)) {
            return this.processedImages.get(cacheKey);
        }

        let dominantColor = this.extractColorFromFilename(img.src);

        try {
            const corsImg = await this.createCORSImage(img);
            
            if (corsImg) {
                this.canvas.width = 50;
                this.canvas.height = 50;
                this.ctx.drawImage(corsImg, 0, 0, 50, 50);
                
                const imageData = this.ctx.getImageData(0, 0, 50, 50);
                const data = imageData.data;
                
                const colorCounts = {};
                const step = 8;
                
                for (let i = 0; i < data.length; i += step * 4) {
                    const r = data[i];
                    const g = data[i + 1];
                    const b = data[i + 2];
                    const a = data[i + 3];
                    
                    if (a < 100 || (r < 50 && g < 50 && b < 50) || (r > 230 && g > 230 && b > 230)) {
                        continue;
                    }
                    
                    const groupedR = Math.floor(r / 30) * 30;
                    const groupedG = Math.floor(g / 30) * 30;
                    const groupedB = Math.floor(b / 30) * 30;
                    const colorKey = `${groupedR},${groupedG},${groupedB}`;
                    
                    colorCounts[colorKey] = (colorCounts[colorKey] || 0) + 1;
                }
                
                if (Object.keys(colorCounts).length > 0) {
                    const dominantColorKey = Object.keys(colorCounts).reduce((a, b) => 
                        colorCounts[a] > colorCounts[b] ? a : b
                    );
                    dominantColor = dominantColorKey;
                }
            }
        } catch (error) {
            console.log('–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞:', error);
        }

        this.processedImages.set(cacheKey, dominantColor);
        return dominantColor;
    },

    async createCORSImage(originalImg) {
        return new Promise((resolve) => {
            const img = new Image();
            img.crossOrigin = 'anonymous';
            
            img.onload = () => resolve(img);
            img.onerror = () => resolve(null);
            
            img.src = originalImg.src + (originalImg.src.includes('?') ? '&' : '?') + 'cors=' + Date.now();
            
            setTimeout(() => resolve(null), 2000);
        });
    }
};

// Initialize glow extractor
glowExtractor.init();

// Telegram WebApp initialization
function initTelegramApp() {
    if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        
        tg.ready();
        tg.expand();
        
        if (tg.MainButton) {
            tg.MainButton.hide();
        }
        
        if (tg.BackButton) {
            tg.BackButton.hide();
        }
    }
}

// Navigation functions
function setActivePage(page) {
    document.querySelectorAll('.nav-item').forEach(item => {
        item.classList.remove('active');
    });
    
    event.target.closest('.nav-item').classList.add('active');
    GameState.currentPage = page;
    
    console.log('Navigating to:', page);
}

// Handle navigation clicks
function handleNavigation(url) {
    document.body.style.opacity = '0.8';
    setTimeout(() => {
        window.location.href = url;
    }, 200);
}

// Handle case opening - –û–ë–ù–û–í–õ–ï–ù–û –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
function openCase(caseId) {
    if (event) {
        event.target.closest('.case-card').style.transform = 'scale(0.95)';
    }
    
    setTimeout(() => {
        window.location.href = `case-detail.html?id=${caseId}`;
    }, 150);
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', async function() {
    // API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–î–û–ë–ê–í–õ–ï–ù–û)
    await initializeAppWithAPI();
    
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initTelegramApp();
    updateBalance();
    
    // Animate case cards on load
    document.querySelectorAll('.case-card').forEach((card, index) => {
        card.style.animationDelay = `${index * 0.1}s`;
    });

    // Header navigation
    const appLogo = document.querySelector('.app-logo');
    if (appLogo) {
        appLogo.onclick = () => handleNavigation('profile.html');
    }
    
    const balanceWidget = document.querySelector('.balance-widget');
    if (balanceWidget) {
        balanceWidget.onclick = () => handleNavigation('balance.html');
    }
    
    // Promo banner navigation
    const promoBanner = document.querySelector('.promo-banner');
    if (promoBanner) {
        promoBanner.onclick = () => handleNavigation('referral.html');
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ —Å–≤–µ—á–µ–Ω–∏—è
    setTimeout(async () => {
        await glowExtractor.processAllLiveItems();
    }, 100);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–≤–µ—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    async function refreshImageGlow() {
        await glowExtractor.processAllLiveItems();
    }
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–î–û–ë–ê–í–õ–ï–ù–û)
    setInterval(async () => {
        if (!window.GameState?.demoMode && window.GameState?.authenticated) {
            await updateBalance();
        }
    }, 30000); // –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
});