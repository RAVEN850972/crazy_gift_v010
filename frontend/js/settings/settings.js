// ===================================================================
// settings.js - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
// ===================================================================

// === –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø API –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø ===

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å API
 */
async function initializeSettingsPageWithAPI() {
    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        await updateBalanceFromAPI();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ API)
        await loadUserSettingsFromAPI();
        
        console.log('‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
    }
}

/**
 * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ API (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 */
async function loadUserSettingsFromAPI() {
    if (window.GameState?.demoMode) {
        console.log('‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ');
        return;
    }
    
    try {
        // –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        // const userSettings = await window.apiClient.getUserSettings(window.GameState.currentUserId);
        // mergeSettings(userSettings);
        
    } catch (error) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
 */
async function updateBalanceFromAPI() {
    if (typeof updateBalanceWithAPI === 'function') {
        await updateBalanceWithAPI();
    }
}

// === –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ö–û–î (—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏) ===

// Settings State
let settings = {
    sound: true,
    vibration: false,
    language: 'ru', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å 'en' –Ω–∞ 'ru'
    referralCode: null // –ë—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
};

// Initialize page
function initPage() {
    initTelegramApp();
    updateBalance();
    loadSettings();
    updateUI();
    generateReferralCode(); // –î–æ–±–∞–≤–ª–µ–Ω–æ
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–µ—Ä—Å–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    showVersionNotice();
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
 * –û–ë–ù–û–í–õ–ï–ù–û: —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç API –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
 */
function generateReferralCode() {
    if (window.GameState?.demoMode || !window.GameState?.currentUserId) {
        // –í –¥–µ–º–æ —Ä–µ–∂–∏–º–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        settings.referralCode = 'DEMO' + Math.random().toString(36).substr(2, 6).toUpperCase();
    } else {
        // –í API —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        settings.referralCode = 'CG' + window.GameState.currentUserId.toString().padStart(6, '0');
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    updateReferralCodeDisplay();
}

/**
 * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
 */
function updateReferralCodeDisplay() {
    const referralElements = document.querySelectorAll('.referral-code, .invite-code');
    referralElements.forEach(element => {
        if (element && settings.referralCode) {
            element.textContent = settings.referralCode;
        }
    });
}

// –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–∏
function showVersionNotice() {
    if (window.Telegram?.WebApp) {
        const version = parseFloat(window.Telegram.WebApp.version || '6.0');
        if (version < 6.1) {
            const notice = document.createElement('div');
            notice.className = 'telegram-fallback-notice';
            notice.textContent = `Telegram –≤–µ—Ä—Å–∏—è ${window.Telegram.WebApp.version}. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.`;
            document.body.appendChild(notice);
            
            setTimeout(() => {
                if (document.body.contains(notice)) {
                    document.body.removeChild(notice);
                }
            }, 4000);
        }
    }
}

// Load settings from localStorage
function loadSettings() {
    const savedSettings = localStorage.getItem('gameSettings');
    if (savedSettings) {
        settings = { ...settings, ...JSON.parse(savedSettings) };
    }
}

// Save settings to localStorage
function saveSettings() {
    localStorage.setItem('gameSettings', JSON.stringify(settings));
    
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å API
    // if (!window.GameState?.demoMode) {
    //     syncSettingsWithAPI();
    // }
}

// Update UI based on current settings
function updateUI() {
    // Update toggle switches
    const soundToggle = document.getElementById('soundToggle');
    const vibrationToggle = document.getElementById('vibrationToggle');
    
    if (soundToggle) {
        if (settings.sound) {
            soundToggle.classList.add('active');
            soundToggle.parentElement.classList.add('active');
        } else {
            soundToggle.classList.remove('active');
            soundToggle.parentElement.classList.remove('active');
        }
    }
    
    if (vibrationToggle) {
        if (settings.vibration) {
            vibrationToggle.classList.add('active');
            vibrationToggle.parentElement.classList.add('active');
        } else {
            vibrationToggle.classList.remove('active');
            vibrationToggle.parentElement.classList.remove('active');
        }
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
    updateReferralCodeDisplay();
}

// Toggle sound setting
function toggleSound() {
    settings.sound = !settings.sound;
    updateUI();
    saveSettings();
    
    // Play feedback sound if enabled
    if (settings.sound) {
        playSound('toggle');
    }
    
    // Haptic feedback
    triggerHaptic('light');
    
    showNotification(settings.sound ? '–ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω' : '–ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω', 'info');
}

// Toggle vibration setting
function toggleVibration() {
    settings.vibration = !settings.vibration;
    updateUI();
    saveSettings();
    
    // Vibrate if enabled
    if (settings.vibration) {
        triggerHaptic('medium');
    }
    
    showNotification(settings.vibration ? '–í–∏–±—Ä–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞' : '–í–∏–±—Ä–∞—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞', 'info');
}

// Copy referral link
function copyReferralLink() {
    if (!settings.referralCode) {
        generateReferralCode();
    }
    
    const referralLink = `https://t.me/CrazyGiftBot?start=${settings.referralCode}`;
    
    // Try to copy to clipboard
    if (navigator.clipboard && window.isSecureContext) {
        navigator.clipboard.writeText(referralLink).then(() => {
            showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
            triggerHaptic('light');
        }).catch(() => {
            fallbackCopyText(referralLink);
        });
    } else {
        fallbackCopyText(referralLink);
    }
}

// Fallback copy method
function fallbackCopyText(text) {
    const textArea = document.createElement('textarea');
    textArea.value = text;
    textArea.style.position = 'fixed';
    textArea.style.opacity = '0';
    document.body.appendChild(textArea);
    textArea.focus();
    textArea.select();
    
    try {
        document.execCommand('copy');
        showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
        triggerHaptic('light');
    } catch (err) {
        showNotification('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å', 'error');
    }
    
    document.body.removeChild(textArea);
}

// Invite friends
function inviteFriends() {
    if (!settings.referralCode) {
        generateReferralCode();
    }
    
    const referralLink = `https://t.me/CrazyGiftBot?start=${settings.referralCode}`;
    const message = `üéÅ –ü–æ–ø—Ä–æ–±—É–π CrazyGift - –æ—Ç–∫—Ä—ã–≤–∞–π –∫–µ–π—Å—ã –∏ –≤—ã–∏–≥—Ä—ã–≤–∞–π –ø—Ä–∏–∑—ã!\n\n${referralLink}`;
    
    if (window.Telegram?.WebApp) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram Share API –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if (window.Telegram.WebApp.openTelegramLink) {
            const shareUrl = `https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(message)}`;
            window.Telegram.WebApp.openTelegramLink(shareUrl);
        } else {
            // Fallback - –∫–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä
            copyReferralLink();
        }
    } else {
        // –í–µ–± –≤–µ—Ä—Å–∏—è - –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π share
        if (navigator.share) {
            navigator.share({
                title: 'CrazyGift',
                text: message,
                url: referralLink
            });
        } else {
            copyReferralLink();
        }
    }
    
    triggerHaptic('medium');
}

// Show promo code modal
function showPromoModal() {
    const modal = document.getElementById('promoModal');
    if (modal) {
        modal.style.display = 'flex';
        
        // Focus –Ω–∞ input
        const input = modal.querySelector('input');
        if (input) {
            setTimeout(() => input.focus(), 100);
        }
    }
    
    triggerHaptic('light');
}

// Close promo code modal
function closePromoModal() {
    const modal = document.getElementById('promoModal');
    if (modal) {
        modal.style.display = 'none';
        
        // –û—á–∏—â–∞–µ–º input
        const input = modal.querySelector('input');
        if (input) {
            input.value = '';
            input.classList.remove('error');
        }
    }
}

// Apply promo code
async function applyPromoCode() {
    const input = document.querySelector('#promoModal input');
    if (!input) return;
    
    const promoCode = input.value.trim().toUpperCase();
    
    if (!promoCode) {
        input.classList.add('error');
        showNotification('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥', 'error');
        return;
    }
    
    try {
        // –í API —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        if (!window.GameState?.demoMode && window.apiClient) {
            // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
            // const result = await window.apiClient.applyPromoCode(window.GameState.currentUserId, promoCode);
            // if (result.success) { ... }
        }
        
        // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        const validPromoCodes = ['GIFT2025', 'WELCOME', 'BONUS100'];
        
        if (validPromoCodes.includes(promoCode)) {
            closePromoModal();
            showNotification('–ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω–µ–Ω! +100 –∑–≤—ë–∑–¥', 'success');
            
            // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å –∫ –±–∞–ª–∞–Ω—Å—É
            if (window.GameState?.demoMode) {
                const newBalance = window.GameState.balance + 100;
                window.GameState.updateBalance(newBalance);
            }
            
            triggerHaptic('success');
        } else {
            input.classList.add('error');
            showNotification('–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥', 'error');
            triggerHaptic('error');
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞', 'error');
        input.classList.add('error');
    }
}

// Show language modal
function showLanguageModal() {
    const modal = document.getElementById('languageModal');
    if (modal) {
        modal.style.display = 'flex';
    }
    
    triggerHaptic('light');
}

// Close language modal
function closeLanguageModal() {
    const modal = document.getElementById('languageModal');
    if (modal) {
        modal.style.display = 'none';
    }
}

// Change language
function changeLanguage(lang) {
    settings.language = lang;
    saveSettings();
    closeLanguageModal();
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã —Å–º–µ–Ω–∞ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    showNotification('–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω', 'success');
    triggerHaptic('light');
}

// Clear game data
function clearGameData() {
    const confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.');
    
    if (confirmed) {
        // –û—á–∏—â–∞–µ–º localStorage
        localStorage.removeItem('gameSettings');
        localStorage.removeItem('gameData');
        localStorage.removeItem('userInventory');
        
        showNotification('–î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã', 'success');
        
        // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        setTimeout(() => {
            window.location.reload();
        }, 1500);
    }
    
    triggerHaptic('medium');
}

// Connect TON wallet
async function connectTonWallet() {
    try {
        if (window.tonConnectUI) {
            await window.tonConnectUI.connectWallet();
            showNotification('TON –∫–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'success');
        } else {
            showNotification('TON Connect –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è TON –∫–æ—à–µ–ª—å–∫–∞:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞', 'error');
    }
    
    triggerHaptic('light');
}

// Initialize Telegram WebApp
function initTelegramApp() {
    if (window.Telegram?.WebApp) {
        const tg = window.Telegram.WebApp;
        tg.ready();
        tg.expand();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if (tg.setHeaderColor) {
            tg.setHeaderColor('bg_color');
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
        if (tg.BackButton) {
            tg.BackButton.show();
            tg.BackButton.onClick(goBack);
        }
        
        // –°–∫—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
        if (tg.MainButton) {
            tg.MainButton.hide();
        }
    }
}

// Update balance display
function updateBalance() {
    const balanceElement = document.getElementById('balance');
    if (balanceElement && window.GameState?.balance) {
        balanceElement.textContent = window.GameState.balance.toLocaleString();
    }
}

// Navigation functions
function goBack() {
    if (window.Telegram?.WebApp?.close) {
        window.Telegram.WebApp.close();
    } else {
        window.location.href = 'profile.html';
    }
}

// Play sound effect
function playSound(soundType) {
    if (!settings.sound) return;
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–≤—É–∫–æ–≤—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    try {
        const audio = new Audio(`assets/sounds/${soundType}.mp3`);
        audio.volume = 0.3;
        audio.play().catch(() => {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        });
    } catch (error) {
        // –ó–≤—É–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
    }
}

// Trigger haptic feedback
function triggerHaptic(type = 'light') {
    if (!settings.vibration || !window.hasUserInteracted) return;
    
    if (window.Telegram?.WebApp?.HapticFeedback) {
        const hf = window.Telegram.WebApp.HapticFeedback;
        
        switch (type) {
            case 'light':
                hf.impactOccurred('light');
                break;
            case 'medium':
                hf.impactOccurred('medium');
                break;
            case 'heavy':
                hf.impactOccurred('heavy');
                break;
            case 'success':
                hf.notificationOccurred('success');
                break;
            case 'error':
                hf.notificationOccurred('error');
                break;
            default:
                hf.impactOccurred('light');
        }
    }
}

// Show notification
function showNotification(message, type = 'info') {
    const notification = document.createElement('div');
    notification.className = `notification notification-${type}`;
    notification.innerHTML = `
        <div class="notification-content">
            <span class="notification-message">${message}</span>
        </div>
    `;
    
    // –°—Ç–∏–ª–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 12px 20px;
        background: ${type === 'error' ? '#ff4757' : type === 'success' ? '#2ed573' : '#5352ed'};
        color: white;
        border-radius: 8px;
        z-index: 1000;
        font-size: 14px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transform: translateX(100%);
        transition: transform 0.3s ease-out;
    `;
    
    document.body.appendChild(notification);
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
    setTimeout(() => {
        notification.style.transform = 'translateX(0)';
    }, 100);
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
            if (notification.parentNode) {
                notification.parentNode.removeChild(notification);
            }
        }, 300);
    }, 3000);
}

// Simulate referral data loading
function loadReferralData() {
    let referralData;
    
    if (window.GameState?.demoMode) {
        // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
        referralData = {
            friendsInvited: 5,
            totalEarnings: 500,
            pendingRewards: 100
        };
    } else {
        // –í API —Ä–µ–∂–∏–º–µ –º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        referralData = {
            friendsInvited: 0,
            totalEarnings: 0,
            pendingRewards: 0
        };
    }
    
    // Update UI with referral data
    const statValue = document.querySelector('.stat-value');
    if (statValue) {
        statValue.textContent = referralData.friendsInvited;
    }
    
    const earningsElements = document.querySelectorAll('.earnings-amount');
    earningsElements.forEach(element => {
        element.textContent = referralData.totalEarnings.toLocaleString();
    });
}

// Event listeners
document.addEventListener('keydown', (e) => {
    // ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
    if (e.key === 'Escape') {
        closePromoModal();
        closeLanguageModal();
    }
    
    // Enter –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if (e.key === 'Enter') {
        const promoModal = document.getElementById('promoModal');
        if (promoModal && promoModal.style.display === 'flex') {
            applyPromoCode();
        }
    }
});

// Handle modal backdrop clicks
document.addEventListener('click', (e) => {
    if (e.target.classList.contains('modal-overlay')) {
        if (e.target.closest('#promoModal')) {
            closePromoModal();
        } else if (e.target.closest('#languageModal')) {
            closeLanguageModal();
        }
    }
});

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', async function() {
    // API –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–î–û–ë–ê–í–õ–ï–ù–û)
    await initializeSettingsPageWithAPI();
    
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    initPage();
    loadReferralData();
    
    // Add subtle entrance animations
    setTimeout(() => {
        document.querySelectorAll('.settings-section').forEach((section, index) => {
            section.style.opacity = '0';
            section.style.transform = 'translateY(20px)';
            section.style.transition = 'all 0.6s ease';
            
            setTimeout(() => {
                section.style.opacity = '1';
                section.style.transform = 'translateY(0)';
            }, index * 100);
        });
    }, 100);
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    const soundToggle = document.getElementById('soundToggle');
    if (soundToggle) {
        soundToggle.addEventListener('click', toggleSound);
    }
    
    const vibrationToggle = document.getElementById('vibrationToggle');
    if (vibrationToggle) {
        vibrationToggle.addEventListener('click', toggleVibration);
    }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    const backButton = document.querySelector('.app-logo, .back-button');
    if (backButton) {
        backButton.addEventListener('click', goBack);
    }
    
    const balanceWidget = document.querySelector('.balance-widget');
    if (balanceWidget) {
        balanceWidget.addEventListener('click', () => {
            window.location.href = 'balance.html';
        });
    }
});